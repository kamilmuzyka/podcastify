{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js\";\nimport React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { SearchContext } from '../../../contexts/SearchContextProvider';\nimport Spotify from '../../../models/Spotify';\nimport Tiles from '../Tiles/Tiles';\nimport Tile from '../Tiles/Tile/Tile';\nimport SearchResultsLoading from './SearchResultsLoading/SearchResultsLoading';\n\nfunction SearchResults(props) {\n  const [shows, updateShows] = useState([]);\n  const [episodes, updateEpisodes] = useState([]);\n  const {\n    query,\n    updateQuery\n  } = useContext(SearchContext);\n  const {\n    searching,\n    updateSearching\n  } = useContext(SearchContext);\n  const [searchResultsLoading, updateSearchResultsLoading] = useState(true);\n\n  function prepareShows(shows) {\n    if (shows.length === 0) {\n      updateShows([]);\n      return;\n    }\n\n    const updatedShows = shows.map(show => {\n      return /*#__PURE__*/React.createElement(Tile, {\n        key: show.id,\n        title: show.name,\n        description: show.description,\n        image: show.images[1].url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 20\n        }\n      });\n    });\n    updateShows(updatedShows);\n  }\n\n  function prepareEpisodes(episodes) {\n    if (episodes.length === 0) {\n      updateEpisodes([]);\n      return;\n    }\n\n    const updatedEpisodes = episodes.map(episode => {\n      return /*#__PURE__*/React.createElement(Tile, {\n        key: episode.id,\n        title: episode.name,\n        description: episode.description,\n        image: episode.images[1].url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 20\n        }\n      });\n    });\n    updateEpisodes(updatedEpisodes);\n  }\n\n  useEffect(() => {\n    if (!searching) {\n      return;\n    }\n\n    let mounted = true;\n\n    if (query) {\n      (async () => {\n        const results = await Spotify.getSearchResults(query);\n\n        if (mounted) {\n          prepareShows(results.shows.items);\n          prepareEpisodes(results.episodes.items);\n          updateSearchResultsLoading(false);\n        }\n      })();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [query]);\n  useEffect(() => {\n    return () => {\n      updateSearching(false);\n      updateQuery('');\n    };\n  }, []);\n\n  if (!searching) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 16\n      }\n    });\n  }\n\n  if (shows.length > 0 && episodes.length > 0) {\n    return /*#__PURE__*/React.createElement(SearchResultsLoading, {\n      loading: searchResultsLoading.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Tiles, {\n      title: \"Shows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, shows), /*#__PURE__*/React.createElement(Tiles, {\n      title: \"Episodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, episodes));\n  }\n\n  if (shows.length > 0 && episodes.length === 0) {\n    return /*#__PURE__*/React.createElement(Tiles, {\n      title: \"Shows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, shows);\n  }\n\n  if (shows.length === 0 && episodes.length > 0) {\n    return /*#__PURE__*/React.createElement(Tiles, {\n      title: \"Episodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, episodes);\n  }\n\n  if (shows.length === 0 && episodes.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, \"No matching results\");\n  }\n}\n\nexport default SearchResults;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js"],"names":["React","useState","useContext","useEffect","Fragment","Redirect","SearchContext","Spotify","Tiles","Tile","SearchResultsLoading","SearchResults","props","shows","updateShows","episodes","updateEpisodes","query","updateQuery","searching","updateSearching","searchResultsLoading","updateSearchResultsLoading","prepareShows","length","updatedShows","map","show","id","name","description","images","url","prepareEpisodes","updatedEpisodes","episode","mounted","results","getSearchResults","items","toString"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { SearchContext } from '../../../contexts/SearchContextProvider';\nimport Spotify from '../../../models/Spotify';\nimport Tiles from '../Tiles/Tiles';\nimport Tile from '../Tiles/Tile/Tile';\nimport SearchResultsLoading from './SearchResultsLoading/SearchResultsLoading';\n\nfunction SearchResults(props) {\n    const [shows, updateShows] = useState([]);\n    const [episodes, updateEpisodes] = useState([]);\n    const { query, updateQuery } = useContext(SearchContext);\n    const { searching, updateSearching } = useContext(SearchContext);\n\n    const [searchResultsLoading, updateSearchResultsLoading] = useState(true);\n\n    function prepareShows(shows) {\n        if(shows.length === 0) {\n            updateShows([]);\n            return;\n        }\n\n        const updatedShows = shows.map(show => {\n            return <Tile\n                key={show.id}\n                title={show.name}\n                description={show.description}\n                image={show.images[1].url} />\n        });\n\n        updateShows(updatedShows);\n    }\n\n    function prepareEpisodes(episodes) {\n        if (episodes.length === 0) {\n            updateEpisodes([]);\n            return;\n        }\n\n        const updatedEpisodes = episodes.map(episode => {\n            return <Tile\n                key={episode.id}\n                title={episode.name}\n                description={episode.description}\n                image={episode.images[1].url} />\n        });\n\n        updateEpisodes(updatedEpisodes);\n    }\n\n    useEffect(() => {\n        if(!searching) {\n            return;\n        }\n        let mounted = true;\n        if(query) {\n            (async () => {\n                const results = await Spotify.getSearchResults(query);\n                if(mounted) {\n                    prepareShows(results.shows.items);\n                    prepareEpisodes(results.episodes.items);\n                    updateSearchResultsLoading(false);\n                }\n            })();\n        }\n\n        return () => {\n            mounted = false\n        };\n    }, [query]);\n\n    useEffect(() => {\n        return () => {\n            updateSearching(false);\n            updateQuery('');\n        }\n    }, [])\n\n    if(!searching) {\n        return <Redirect to=\"/\"/>\n    }\n\n    if(shows.length > 0 && episodes.length > 0) {\n        return (\n            <SearchResultsLoading loading={searchResultsLoading.toString()}>\n                <Tiles title=\"Shows\">\n                    {shows}\n                </Tiles>\n                <Tiles title=\"Episodes\">\n                    {episodes}\n                </Tiles>\n            </SearchResultsLoading>\n        );\n    }\n\n    if(shows.length > 0 && episodes.length === 0) {\n        return (\n            <Tiles title=\"Shows\">\n                {shows}\n            </Tiles>\n        );\n    }\n\n    if(shows.length === 0 && episodes.length > 0) {\n        return (\n            <Tiles title=\"Episodes\">\n                {episodes}\n            </Tiles>\n        );\n    }\n\n    if(shows.length === 0 && episodes.length === 0) {\n        return (\n            <div>No matching results</div>\n        );\n    }\n}\n\nexport default SearchResults;"]},"metadata":{},"sourceType":"module"}