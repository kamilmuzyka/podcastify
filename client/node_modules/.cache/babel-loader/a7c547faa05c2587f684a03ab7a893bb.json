{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js\";\nimport React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../constants';\nimport Spotify from '../../../models/Spotify';\nimport WorkspaceLoading from '../WorkspaceLoading/WorkspaceLoading';\nimport Tiles from '../Tiles/Tiles';\nimport Tile from '../Tiles/Tile/Tile';\n\nfunction SearchResults({\n  history\n}) {\n  const [isLoading, updateIsLoading] = useState(true);\n  const [query, updateQuery] = useState('');\n  const [shows, updateShows] = useState([]);\n  const [episodes, updateEpisodes] = useState([]);\n  useEffect(() => {\n    const newQuery = new URLSearchParams(history.location.search).get('query');\n\n    if (newQuery !== query) {\n      updateQuery(newQuery);\n    }\n  });\n  useEffect(() => {\n    if (query) {\n      (async () => {\n        try {\n          const {\n            shows,\n            episodes\n          } = await Spotify.getSearchResults(query);\n          updateShows(shows.items);\n          updateEpisodes(episodes.items);\n          updateIsLoading(false);\n        } catch (err) {\n          console.error(err);\n        }\n      })();\n    }\n  }, [query]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, shows.length === 0 && episodes.length === 0 ? 'Nothing found' : shows.length > 0 ? /*#__PURE__*/React.createElement(Tiles, {\n    title: \"Shows\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, shows.map(show => {\n    return /*#__PURE__*/React.createElement(Tile, {\n      key: show.id,\n      id: show.id,\n      title: show.name,\n      description: show.description,\n      image: show.images[1].url,\n      type: SEARCH_TYPES.show,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 36\n      }\n    });\n  })) : null(episodes.length) > 0 ? /*#__PURE__*/React.createElement(Tiles, {\n    title: \"Episodes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, episodes.map(episode => {\n    return /*#__PURE__*/React.createElement(Tile, {\n      key: episode.id,\n      id: episode.id,\n      title: episode.name,\n      description: episode.description,\n      image: episode.images[1].url,\n      type: SEARCH_TYPES.episode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 36\n      }\n    });\n  })) : null, /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default withRouter(SearchResults);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js"],"names":["React","useState","useContext","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","WorkspaceLoading","Tiles","Tile","SearchResults","history","isLoading","updateIsLoading","query","updateQuery","shows","updateShows","episodes","updateEpisodes","newQuery","URLSearchParams","location","search","get","getSearchResults","items","err","console","error","length","map","show","id","name","description","images","url","episode","toString"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../constants';\nimport Spotify from '../../../models/Spotify';\nimport WorkspaceLoading from '../WorkspaceLoading/WorkspaceLoading';\nimport Tiles from '../Tiles/Tiles';\nimport Tile from '../Tiles/Tile/Tile';\n\nfunction SearchResults({ history }) {\n    const [isLoading, updateIsLoading] = useState(true);\n    const [query, updateQuery] = useState('');\n    const [shows, updateShows] = useState([]);\n    const [episodes, updateEpisodes] = useState([]);\n\n    useEffect(() => {\n        const newQuery = new URLSearchParams(history.location.search).get('query');\n        if(newQuery !== query) {\n            updateQuery(newQuery);\n        }\n    });\n\n    useEffect(() => {\n        if(query) {\n            (async () => {\n                try {\n                    const { shows, episodes } = await Spotify.getSearchResults(query);\n                    updateShows(shows.items);\n                    updateEpisodes(episodes.items);\n                    updateIsLoading(false);\n                } catch(err) {\n                    console.error(err);\n                }\n            })();\n        }\n    }, [query]);\n\n    return (\n        <Fragment>\n            { (shows.length === 0 && episodes.length === 0) ?\n                'Nothing found'\n                :\n                ( (shows.length > 0) ?\n                    <Tiles title=\"Shows\">\n                        { shows.map(show => {\n                            return <Tile\n                                key={show.id}\n                                id={show.id}\n                                title={show.name}\n                                description={show.description}\n                                image={show.images[1].url}\n                                type={SEARCH_TYPES.show} />\n                        })}\n                    </Tiles>\n                : null\n\n                (episodes.length) > 0 ?\n                    <Tiles title=\"Episodes\">\n                        { episodes.map(episode => {\n                            return <Tile\n                                key={episode.id}\n                                id={episode.id}\n                                title={episode.name}\n                                description={episode.description}\n                                image={episode.images[1].url}\n                                type={SEARCH_TYPES.episode} />\n                        })}\n                    </Tiles>\n                : null )}\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(SearchResults);"]},"metadata":{},"sourceType":"module"}