{"ast":null,"code":"class Spotify {\n  static retrieveAccessToken() {\n    const access = localStorage.getItem('access');\n\n    if (!access) {\n      throw new Error('No access token found');\n    }\n\n    const {\n      token\n    } = JSON.parse(access);\n    return token;\n  }\n\n  static async getSearchResults(query) {\n    const token = this.retrieveAccessToken();\n\n    if (!token) {\n      throw new Error('No token provided');\n    }\n\n    try {\n      const data = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=show,episode&limit=50`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await data.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getShowDetails(id) {\n    const token = this.retrieveAccessToken();\n\n    if (!token) {\n      throw new Error('No token provided');\n    }\n\n    try {\n      const data = await fetch(`https://api.spotify.com/v1/shows/${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await data.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getEpisodeDetails(id) {\n    const token = this.retrieveAccessToken();\n\n    if (!token) {\n      throw new Error('No token provided');\n    }\n\n    try {\n      const data = await fetch(`https://api.spotify.com/v1/episodes/${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await data.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getUserProfile() {\n    const token = this.retrieveAccessToken();\n\n    if (!token) {\n      throw new Error('No token provided');\n    }\n\n    try {\n      const data = await fetch(`https://api.spotify.com/v1/me`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await data.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getUserShows() {\n    const token = this.retrieveAccessToken();\n\n    if (!token) {\n      throw new Error('No token provided');\n    }\n\n    try {\n      const data = await fetch(`https://api.spotify.com/v1/me/shows?limit=50`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await data.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async saveUserShow(id) {\n    const token = this.retrieveAccessToken();\n\n    if (!token) {\n      throw new Error('No token provided');\n    }\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/shows?ids=${id}sss`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        },\n        method: 'PUT'\n      });\n\n      if (response.ok) {\n        return true;\n      }\n\n      throw new Error(await response.json());\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/models/Spotify.js"],"names":["Spotify","retrieveAccessToken","access","localStorage","getItem","Error","token","JSON","parse","getSearchResults","query","data","fetch","headers","json","err","getShowDetails","id","getEpisodeDetails","getUserProfile","getUserShows","saveUserShow","response","method","ok"],"mappings":"AAAA,MAAMA,OAAN,CAAc;AACV,SAAOC,mBAAP,GAA6B;AACzB,UAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;;AACA,QAAG,CAACF,MAAJ,EAAY;AACR,YAAM,IAAIG,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAYC,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAlB;AACA,WAAOI,KAAP;AACH;;AAED,eAAaG,gBAAb,CAA8BC,KAA9B,EAAqC;AACjC,UAAMJ,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI,CAACK,KAAL,EAAY;AACR,YAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;AACH;;AACD,QAAI;AACA,YAAMM,IAAI,GAAG,MAAMC,KAAK,CAAE,uCAAsCF,KAAM,6BAA9C,EAA4E;AAChGG,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AADuF,OAA5E,CAAxB;AAKA,aAAO,MAAMK,IAAI,CAACG,IAAL,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaC,cAAb,CAA4BC,EAA5B,EAAgC;AAC5B,UAAMX,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI,CAACK,KAAL,EAAY;AACR,YAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;AACH;;AACD,QAAI;AACA,YAAMM,IAAI,GAAG,MAAMC,KAAK,CAAE,oCAAmCK,EAAG,EAAxC,EAA2C;AAC/DJ,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AADsD,OAA3C,CAAxB;AAKA,aAAO,MAAMK,IAAI,CAACG,IAAL,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaG,iBAAb,CAA+BD,EAA/B,EAAmC;AAC/B,UAAMX,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI,CAACK,KAAL,EAAY;AACR,YAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;AACH;;AACD,QAAI;AACA,YAAMM,IAAI,GAAG,MAAMC,KAAK,CAAE,uCAAsCK,EAAG,EAA3C,EAA8C;AAClEJ,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AADyD,OAA9C,CAAxB;AAKA,aAAO,MAAMK,IAAI,CAACG,IAAL,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaI,cAAb,GAA8B;AAC1B,UAAMb,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI,CAACK,KAAL,EAAY;AACR,YAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;AACH;;AACD,QAAI;AACA,YAAMM,IAAI,GAAG,MAAMC,KAAK,CAAE,+BAAF,EAAkC;AACtDC,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AAD6C,OAAlC,CAAxB;AAKA,aAAO,MAAMK,IAAI,CAACG,IAAL,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaK,YAAb,GAA4B;AACxB,UAAMd,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI,CAACK,KAAL,EAAY;AACR,YAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;AACH;;AACD,QAAI;AACA,YAAMM,IAAI,GAAG,MAAMC,KAAK,CAAE,8CAAF,EAAiD;AACrEC,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AAD4D,OAAjD,CAAxB;AAKA,aAAO,MAAMK,IAAI,CAACG,IAAL,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaM,YAAb,CAA0BJ,EAA1B,EAA8B;AAC1B,UAAMX,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI,CAACK,KAAL,EAAY;AACR,YAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;AACH;;AACD,QAAI;AACA,YAAMiB,QAAQ,GAAG,MAAMV,KAAK,CAAE,2CAA0CK,EAAG,KAA/C,EAAqD;AAC7EJ,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB,SADoE;AAI7EiB,QAAAA,MAAM,EAAE;AAJqE,OAArD,CAA5B;;AAMA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACb,eAAO,IAAP;AACH;;AACD,YAAM,IAAInB,KAAJ,CAAU,MAAMiB,QAAQ,CAACR,IAAT,EAAhB,CAAN;AACH,KAXD,CAWE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAlHS;;AAqHd,eAAef,OAAf","sourcesContent":["class Spotify {\n    static retrieveAccessToken() {\n        const access = localStorage.getItem('access');\n        if(!access) {\n            throw new Error('No access token found');\n        }\n        const { token } = JSON.parse(access);\n        return token;\n    }\n\n    static async getSearchResults(query) {\n        const token = this.retrieveAccessToken();\n        if (!token) {\n            throw new Error('No token provided');\n        }\n        try {\n            const data = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=show,episode&limit=50`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await data.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getShowDetails(id) {\n        const token = this.retrieveAccessToken();\n        if (!token) {\n            throw new Error('No token provided');\n        }\n        try {\n            const data = await fetch(`https://api.spotify.com/v1/shows/${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await data.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getEpisodeDetails(id) {\n        const token = this.retrieveAccessToken();\n        if (!token) {\n            throw new Error('No token provided');\n        }\n        try {\n            const data = await fetch(`https://api.spotify.com/v1/episodes/${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await data.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getUserProfile() {\n        const token = this.retrieveAccessToken();\n        if (!token) {\n            throw new Error('No token provided');\n        }\n        try {\n            const data = await fetch(`https://api.spotify.com/v1/me`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await data.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getUserShows() {\n        const token = this.retrieveAccessToken();\n        if (!token) {\n            throw new Error('No token provided');\n        }\n        try {\n            const data = await fetch(`https://api.spotify.com/v1/me/shows?limit=50`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await data.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async saveUserShow(id) {\n        const token = this.retrieveAccessToken();\n        if (!token) {\n            throw new Error('No token provided');\n        }\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me/shows?ids=${id}sss`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'PUT'\n            });\n            if (response.ok) {\n                return true;\n            }\n            throw new Error(await response.json());\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}