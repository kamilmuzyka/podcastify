{"ast":null,"code":"import _slicedToArray from\"/Users/kamil.muzyka/Desktop/podcastify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useState}from'react';import{ThemeProvider}from'styled-components';import{darkTheme,lightTheme}from'../styles/theme';export var ThemeContext=createContext();var ThemeContextProvider=function ThemeContextProvider(props){var _useState=useState('dark'),_useState2=_slicedToArray(_useState,2),currentTheme=_useState2[0],updateCurrentTheme=_useState2[1];var toggleTheme=function toggleTheme(){currentTheme==='dark'?updateCurrentTheme('dark'):updateCurrentTheme('light');};return/*#__PURE__*/React.createElement(ThemeContext.Provider,{value:{toggleTheme:toggleTheme}},/*#__PURE__*/React.createElement(ThemeProvider,{theme:currentTheme==='dark'?darkTheme:lightTheme},props.children));};export default ThemeContextProvider;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/contexts/ThemeContextProvider.js"],"names":["React","createContext","useState","ThemeProvider","darkTheme","lightTheme","ThemeContext","ThemeContextProvider","props","currentTheme","updateCurrentTheme","toggleTheme","children"],"mappings":"6JAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,QAA/B,KAA+C,OAA/C,CACA,OAASC,aAAT,KAA8B,mBAA9B,CACA,OAASC,SAAT,CAAoBC,UAApB,KAAsC,iBAAtC,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGL,aAAa,EAAlC,CAEP,GAAMM,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,KAAD,CAAW,eACON,QAAQ,CAAC,MAAD,CADf,wCAC7BO,YAD6B,eACfC,kBADe,eAGpC,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtBF,YAAY,GAAK,MAAjB,CAA0BC,kBAAkB,CAAC,MAAD,CAA5C,CAAuDA,kBAAkB,CAAC,OAAD,CAAzE,CACH,CAFD,CAIA,mBACI,oBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAC1BC,WAAW,CAAXA,WAD0B,CAA9B,eAGI,oBAAC,aAAD,EAAe,KAAK,CAAEF,YAAY,GAAK,MAAjB,CAA0BL,SAA1B,CAAsCC,UAA5D,EACKG,KAAK,CAACI,QADX,CAHJ,CADJ,CASH,CAhBD,CAkBA,cAAeL,CAAAA,oBAAf","sourcesContent":["import React, { createContext, useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { darkTheme, lightTheme } from '../styles/theme';\n\nexport const ThemeContext = createContext();\n\nconst ThemeContextProvider = (props) => {\n    const [currentTheme, updateCurrentTheme] = useState('dark');\n\n    const toggleTheme = () => {\n        currentTheme === 'dark' ? updateCurrentTheme('dark') : updateCurrentTheme('light');\n    }\n\n    return (\n        <ThemeContext.Provider value={{\n            toggleTheme\n        }}>\n            <ThemeProvider theme={currentTheme === 'dark' ? darkTheme : lightTheme}>\n                {props.children}\n            </ThemeProvider>\n        </ThemeContext.Provider>\n    );\n}\n\nexport default ThemeContextProvider;"]},"metadata":{},"sourceType":"module"}