{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Details/LibraryButton/LibraryButton.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from '../../../../UI/Button/Button';\nimport Spotify from '../../../../models/Spotify';\nimport { SEARCH_TYPES } from '../../../../constants';\n\nconst LibraryButton = ({\n  type,\n  id\n}) => {\n  const [text, updateText] = useState('');\n  useEffect(() => {\n    (async () => {\n      if (id) {\n        const inLibrary = await Spotify.checkUserShow(id);\n\n        if (inLibrary && type === SEARCH_TYPES.show) {\n          console.log('show');\n        }\n      }\n    })();\n  }, [id]);\n\n  const handleShowFollow = id => {\n    Spotify.saveUserShow(id);\n  };\n\n  const handleShowUnfollow = id => {\n    Spotify.removeUserShow(id);\n  };\n\n  return /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    outline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, text);\n};\n\nexport default LibraryButton;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Details/LibraryButton/LibraryButton.js"],"names":["React","useState","useEffect","Button","Spotify","SEARCH_TYPES","LibraryButton","type","id","text","updateText","inLibrary","checkUserShow","show","console","log","handleShowFollow","saveUserShow","handleShowUnfollow","removeUserShow"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,YAAT,QAA6B,uBAA7B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAkB;AACpC,QAAM,CAACC,IAAD,EAAOC,UAAP,IAAqBT,QAAQ,CAAC,EAAD,CAAnC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,UAAGM,EAAH,EAAO;AACH,cAAMG,SAAS,GAAG,MAAMP,OAAO,CAACQ,aAAR,CAAsBJ,EAAtB,CAAxB;;AACA,YAAGG,SAAS,IAAIJ,IAAI,KAAKF,YAAY,CAACQ,IAAtC,EAA4C;AACxCC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;AACJ;AACJ,KAPD;AAQH,GATQ,EASN,CAACP,EAAD,CATM,CAAT;;AAWA,QAAMQ,gBAAgB,GAAIR,EAAD,IAAQ;AAC7BJ,IAAAA,OAAO,CAACa,YAAR,CAAqBT,EAArB;AACH,GAFD;;AAIA,QAAMU,kBAAkB,GAAIV,EAAD,IAAQ;AAC/BJ,IAAAA,OAAO,CAACe,cAAR,CAAuBX,EAAvB;AACH,GAFD;;AAIA,sBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,IADL,CADJ;AAKH,CA3BD;;AA6BA,eAAeH,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '../../../../UI/Button/Button';\nimport Spotify from '../../../../models/Spotify';\nimport { SEARCH_TYPES } from '../../../../constants';\n\nconst LibraryButton = ({ type, id }) => {\n    const [text, updateText] = useState('');\n\n    useEffect(() => {\n        (async () => {\n            if(id) {\n                const inLibrary = await Spotify.checkUserShow(id);\n                if(inLibrary && type === SEARCH_TYPES.show) {\n                    console.log('show');\n                }\n            }\n        })();\n    }, [id])\n\n    const handleShowFollow = (id) => {\n        Spotify.saveUserShow(id);\n    };\n\n    const handleShowUnfollow = (id) => {\n        Spotify.removeUserShow(id);\n    };\n\n    return (\n        <Button type=\"button\" outline>\n            {text}\n        </Button>\n    );\n}\n\nexport default LibraryButton;"]},"metadata":{},"sourceType":"module"}