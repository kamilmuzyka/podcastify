{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js\";\nimport React, { useState, useContext, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport useKey from '../../../hooks/useKey';\nimport { QueueContext } from '../../../contexts/QueueContextProvider';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nimport PlayButton from '../../../UI/PlayButton/PlayButton';\nimport PauseButton from '../../../UI/PauseButton/PauseButton';\nimport SkipButton from '../../../UI/SkipButton/SkipButton';\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\nconst Progress = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\nconst Bar = styled.div`\n    width: ${({\n  percentage\n}) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\nconst Controls = styled.div`\n    display: flex;\n    align-items: center;\n    @media (min-width: 500px) {\n        order: 2;\n        flex: 1;\n        justify-content: center;\n    }\n    @media (min-width: 1380px) {\n        position: absolute;\n        top: 1.25em;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`;\nconst MiddleButton = styled.div`\n    display: inline-block;\n    margin: 0 1em;\n`;\nconst Episode = styled.div`\n    font-size: ${({\n  theme\n}) => theme.typography.small};\n    color: ${({\n  theme\n}) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        background-color: transparent;\n    }\n`;\nconst Placeholder = styled.div`\n    width: 50px;\n    height: 50px;\n    background-size: cover;\n`;\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = props => {\n  const [progressPercentage, updateProgressPercentage] = useState(0);\n  const {\n    currentEpisode,\n    loadQueueNext\n  } = useContext(QueueContext);\n  const {\n    isPlaying,\n    updateAudio,\n    startPlaying,\n    stopPlaying,\n    playNext,\n    playPrevious,\n    resetPlayer\n  } = useContext(PlayerContext);\n  const audioRef = useRef();\n\n  const refreshProgressBar = () => {\n    const currentTime = audioRef.current.currentTime;\n    const duration = audioRef.current.duration;\n    const progress = Math.round(currentTime / duration * 100);\n    updateProgressPercentage(progress);\n  };\n\n  const handleSpaceDown = e => {\n    const tag = e.target.tagName;\n\n    if (tag !== 'INPUT' && tag !== 'TEXTAREA') {\n      e.preventDefault();\n\n      if (isPlaying) {\n        stopPlaying();\n      } else {\n        startPlaying();\n      }\n    }\n  };\n\n  useKey('Space', handleSpaceDown);\n  useEffect(() => {\n    updateAudio(audioRef.current);\n    const intervalId = setInterval(refreshProgressBar, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  useEffect(() => {\n    if (progressPercentage === 100) {\n      loadQueueNext();\n    }\n  }, [progressPercentage]);\n  useEffect(() => {\n    resetPlayer();\n  }, [currentEpisode]);\n  return /*#__PURE__*/React.createElement(Element, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Progress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    percentage: progressPercentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    src: currentEpisode === null || currentEpisode === void 0 ? void 0 : currentEpisode.audio_preview_url,\n    ref: audioRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(SkipButton, {\n    direction: \"backward\",\n    scale: 1.25,\n    onClick: playPrevious,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(MiddleButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }, isPlaying && currentEpisode ? /*#__PURE__*/React.createElement(PauseButton, {\n    scale: 1.25,\n    onClick: stopPlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(PlayButton, {\n    scale: 1.25,\n    onClick: startPlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(SkipButton, {\n    direction: \"forward\",\n    scale: 1.25,\n    onClick: playNext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Episode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, currentEpisode ? /*#__PURE__*/React.createElement(InternalLink, {\n    to: `/episodes/${currentEpisode.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Thumbnail, {\n    src: currentEpisode.images[0].url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Name, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 29\n    }\n  }, currentEpisode.name)) : /*#__PURE__*/React.createElement(Placeholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default Player;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js"],"names":["React","useState","useContext","useRef","useEffect","styled","Link","useKey","QueueContext","PlayerContext","PlayButton","PauseButton","SkipButton","Element","div","theme","colors","tertiary","Progress","Bar","percentage","specific","Content","Controls","MiddleButton","Episode","typography","small","InternalLink","Thumbnail","img","Placeholder","Name","p","Player","props","progressPercentage","updateProgressPercentage","currentEpisode","loadQueueNext","isPlaying","updateAudio","startPlaying","stopPlaying","playNext","playPrevious","resetPlayer","audioRef","refreshProgressBar","currentTime","current","duration","progress","Math","round","handleSpaceDown","e","tag","target","tagName","preventDefault","intervalId","setInterval","clearInterval","audio_preview_url","id","images","url","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport useKey from '../../../hooks/useKey';\nimport { QueueContext } from '../../../contexts/QueueContextProvider';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nimport PlayButton from '../../../UI/PlayButton/PlayButton';\nimport PauseButton from '../../../UI/PauseButton/PauseButton';\nimport SkipButton from '../../../UI/SkipButton/SkipButton';\n\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\n\nconst Progress = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\n\nconst Bar = styled.div`\n    width: ${({ percentage }) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\n\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\n\nconst Controls = styled.div`\n    display: flex;\n    align-items: center;\n    @media (min-width: 500px) {\n        order: 2;\n        flex: 1;\n        justify-content: center;\n    }\n    @media (min-width: 1380px) {\n        position: absolute;\n        top: 1.25em;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`;\n\nconst MiddleButton = styled.div`\n    display: inline-block;\n    margin: 0 1em;\n`;\n\nconst Episode = styled.div`\n    font-size: ${({ theme }) => theme.typography.small};\n    color: ${({ theme }) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\n\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\n\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        background-color: transparent;\n    }\n`;\n\nconst Placeholder = styled.div`\n    width: 50px;\n    height: 50px;\n    background-size: cover;\n`;\n\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = (props) => {\n    const [progressPercentage, updateProgressPercentage] = useState(0);\n    const { currentEpisode, loadQueueNext } = useContext(QueueContext);\n    const {\n        isPlaying,\n        updateAudio,\n        startPlaying,\n        stopPlaying,\n        playNext,\n        playPrevious,\n        resetPlayer\n    } = useContext(PlayerContext);\n    const audioRef = useRef();\n\n    const refreshProgressBar = () => {\n        const currentTime = audioRef.current.currentTime;\n        const duration = audioRef.current.duration;\n        const progress = Math.round(currentTime / duration * 100);\n        updateProgressPercentage(progress);\n    }\n\n    const handleSpaceDown = (e) => {\n        const tag = e.target.tagName;\n        if (tag !== 'INPUT' && tag !== 'TEXTAREA') {\n            e.preventDefault();\n            if (isPlaying) {\n                stopPlaying();\n            } else {\n                startPlaying();\n            }\n        }\n    }\n\n    useKey('Space', handleSpaceDown);\n\n    useEffect(() => {\n        updateAudio(audioRef.current);\n        const intervalId = setInterval(refreshProgressBar, 300);\n        return () => {\n            clearInterval(intervalId);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (progressPercentage === 100) {\n            loadQueueNext();\n        }\n    }, [progressPercentage]);\n\n    useEffect(() => {\n        resetPlayer();\n    }, [currentEpisode]);\n\n    return (\n        <Element>\n            <Progress>\n                <Bar percentage={progressPercentage}/>\n            </Progress>\n            <Content>\n                <Controls>\n                    <audio src={currentEpisode?.audio_preview_url} ref={audioRef}/>\n                    <SkipButton direction=\"backward\" scale={1.25} onClick={playPrevious}/>\n                    <MiddleButton>\n                        { isPlaying && currentEpisode ?\n                            <PauseButton scale={1.25} onClick={stopPlaying} />\n                            :\n                            <PlayButton scale={1.25} onClick={startPlaying} />\n                        }\n                    </MiddleButton>\n                    <SkipButton direction=\"forward\" scale={1.25} onClick={playNext}/>\n                </Controls>\n                <Episode>\n                    { currentEpisode ?\n                        <InternalLink to={`/episodes/${currentEpisode.id}`}>\n                            <Thumbnail src={currentEpisode.images[0].url}/>\n                            <Name>\n                                {currentEpisode.name}\n                            </Name>\n                        </InternalLink>\n                        :\n                        <Placeholder/>\n                    }\n                </Episode>\n            </Content>\n        </Element>\n    );\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}