{"ast":null,"code":"class Spotify {\n  static retrieveToken() {\n    const access = localStorage.getItem('access');\n\n    if (!access) {\n      throw new Error('No access token found');\n    }\n\n    const {\n      token\n    } = JSON.parse(access);\n    return token;\n  }\n\n  static async getSearchResults(query) {\n    const token = this.retrieveToken();\n    console.log(token);\n\n    if (!token) {\n      throw new Error('Not token provided');\n    }\n\n    try {\n      const data = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=show,episode&limit=50`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await data.json();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  static async getShowDetails(id) {\n    const token = this.retrieveToken();\n\n    if (!token) {\n      return;\n    }\n\n    try {\n      const data = await fetch(`https://api.spotify.com/v1/shows/${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await data.json();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  static async getUserProfile() {\n    const token = this.retrieveToken();\n\n    if (!token) {\n      return;\n    }\n\n    try {\n      const data = await fetch(`https://api.spotify.com/v1/me`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      const results = await data.json();\n      return results;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/models/Spotify.js"],"names":["Spotify","retrieveToken","access","localStorage","getItem","Error","token","JSON","parse","getSearchResults","query","console","log","data","fetch","headers","json","err","error","getShowDetails","id","getUserProfile","results"],"mappings":"AAAA,MAAMA,OAAN,CAAc;AAEV,SAAOC,aAAP,GAAuB;AACnB,UAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;;AAEA,QAAG,CAACF,MAAJ,EAAY;AACR,YAAM,IAAIG,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAYC,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAlB;AACA,WAAOI,KAAP;AACH;;AAED,eAAaG,gBAAb,CAA8BC,KAA9B,EAAqC;AACjC,UAAMJ,KAAK,GAAG,KAAKL,aAAL,EAAd;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;;AAEA,QAAI,CAACA,KAAL,EAAY;AACR,YAAM,IAAID,KAAJ,CAAU,oBAAV,CAAN;AACH;;AAED,QAAI;AACA,YAAMQ,IAAI,GAAG,MAAMC,KAAK,CAAE,uCAAsCJ,KAAM,6BAA9C,EAA4E;AAChGK,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYT;AADxB;AADuF,OAA5E,CAAxB;AAKA,aAAO,MAAMO,IAAI,CAACG,IAAL,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACVN,MAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACH;AACJ;;AAED,eAAaE,cAAb,CAA4BC,EAA5B,EAAgC;AAC5B,UAAMd,KAAK,GAAG,KAAKL,aAAL,EAAd;;AAEA,QAAI,CAACK,KAAL,EAAY;AACR;AACH;;AAED,QAAI;AACA,YAAMO,IAAI,GAAG,MAAMC,KAAK,CAAE,oCAAmCM,EAAG,EAAxC,EAA2C;AAC/DL,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYT;AADxB;AADsD,OAA3C,CAAxB;AAKA,aAAO,MAAMO,IAAI,CAACG,IAAL,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACVN,MAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACH;AACJ;;AAED,eAAaI,cAAb,GAA8B;AAC1B,UAAMf,KAAK,GAAG,KAAKL,aAAL,EAAd;;AAEA,QAAI,CAACK,KAAL,EAAY;AACR;AACH;;AAED,QAAI;AACA,YAAMO,IAAI,GAAG,MAAMC,KAAK,CAAE,+BAAF,EAAkC;AACtDC,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYT;AADxB;AAD6C,OAAlC,CAAxB;AAKA,YAAMgB,OAAO,GAAG,MAAMT,IAAI,CAACG,IAAL,EAAtB;AACA,aAAOM,OAAP;AACH,KARD,CAQE,OAAOL,GAAP,EAAY;AACVN,MAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACH;AACJ;;AAtES;;AAyEd,eAAejB,OAAf","sourcesContent":["class Spotify {\n\n    static retrieveToken() {\n        const access = localStorage.getItem('access');\n\n        if(!access) {\n            throw new Error('No access token found');\n        }\n\n        const { token } = JSON.parse(access);\n        return token;\n    }\n\n    static async getSearchResults(query) {\n        const token = this.retrieveToken();\n        console.log(token);\n\n        if (!token) {\n            throw new Error('Not token provided');\n        }\n\n        try {\n            const data = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=show,episode&limit=50`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await data.json();\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    static async getShowDetails(id) {\n        const token = this.retrieveToken();\n\n        if (!token) {\n            return;\n        }\n\n        try {\n            const data = await fetch(`https://api.spotify.com/v1/shows/${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await data.json();\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    static async getUserProfile() {\n        const token = this.retrieveToken();\n\n        if (!token) {\n            return;\n        }\n\n        try {\n            const data = await fetch(`https://api.spotify.com/v1/me`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            const results = await data.json();\n            return results;\n        } catch (err) {\n            console.error(err);\n        }\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}