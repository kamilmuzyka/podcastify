{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport Tiles from '../../Tiles/Tiles';\nimport Tile from '../../Tiles/Tile/Tile';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst Episode = ({\n  location\n}) => {\n  const [isLoading, updateIsLoading] = useState(true);\n  const [details, updateDetails] = useState({});\n  const [episodes, updateEpisodes] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const path = location.pathname;\n      const episodeId = extractId(path);\n\n      try {\n        const episode = await Spotify.getEpisodeDetails(episodeId);\n        const show = await Spotify.getShowDetails(episode.show.id);\n        const several = show.episodes.items.filter(episode => episode.id !== episodeId).splice(0, 3);\n        updateDetails({\n          name: episode.name,\n          description: episode.description,\n          external: episode.external_urls.spotify,\n          type: SEARCH_TYPES.episode,\n          showName: episode.show.name,\n          showId: episode.show.id,\n          releaseDate: episode.release_date,\n          duration: episode.duration_ms\n        });\n        updateEpisodes(several);\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [location.pathname]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    payload: details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tiles, {\n    title: \"More episodes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, episodes ? episodes.map(episode => {\n    return /*#__PURE__*/React.createElement(Tile, {\n      key: episode.id,\n      id: episode.id,\n      title: episode.name,\n      description: episode.description,\n      image: episode.images[1].url,\n      type: SEARCH_TYPES.episode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 32\n      }\n    });\n  }) : null), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Episode);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","Details","Tiles","Tile","WorkspaceLoading","Episode","location","isLoading","updateIsLoading","details","updateDetails","episodes","updateEpisodes","path","pathname","episodeId","episode","getEpisodeDetails","show","getShowDetails","id","several","items","filter","splice","name","description","external","external_urls","spotify","type","showName","showId","releaseDate","release_date","duration","duration_ms","err","Error","map","images","url","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport Tiles from '../../Tiles/Tiles';\nimport Tile from '../../Tiles/Tile/Tile';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst Episode = ({ location }) => {\n    const [isLoading, updateIsLoading] = useState(true);\n    const [details, updateDetails] = useState({});\n    const [episodes, updateEpisodes] = useState([]);\n\n    useEffect(() => {\n        (async () => {\n            const path = location.pathname;\n            const episodeId = extractId(path);\n            try {\n                const episode = await Spotify.getEpisodeDetails(episodeId);\n                const show = await Spotify.getShowDetails(episode.show.id);\n                const several = show.episodes.items\n                    .filter(episode => episode.id !== episodeId)\n                    .splice(0, 3);\n                updateDetails({\n                    name: episode.name,\n                    description: episode.description,\n                    external: episode.external_urls.spotify,\n                    type: SEARCH_TYPES.episode,\n                    showName: episode.show.name,\n                    showId: episode.show.id,\n                    releaseDate: episode.release_date,\n                    duration: episode.duration_ms\n                });\n                updateEpisodes(several);\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [location.pathname]);\n\n    return (\n        <Fragment>\n            <Details payload={details}/>\n            <Tiles title=\"More episodes\">\n                { episodes ?\n                    episodes.map(episode => {\n                        return <Tile\n                            key={episode.id}\n                            id={episode.id}\n                            title={episode.name}\n                            description={episode.description}\n                            image={episode.images[1].url}\n                            type={SEARCH_TYPES.episode} />\n                }) : null}\n            </Tiles>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Episode);"]},"metadata":{},"sourceType":"module"}