{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({\n  location\n}) => {\n  const [details, updateDetails] = useState({});\n  const [library, updateLibrary] = useState({});\n  const [isFollowed, updateIsFollowed] = useState(null);\n  const [isLoading, updateIsLoading] = useState(true);\n  const SHOW_ID = extractId(location.pathname);\n\n  const handleShowFollow = id => {\n    Spotify.saveUserShow(id);\n    updateIsFollowed(true);\n  };\n\n  const handleShowUnfollow = id => {\n    Spotify.removeUserShow(id);\n    updateIsFollowed(false);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const inLibrary = await Spotify.checkUserShow(SHOW_ID);\n        updateLibrary({\n          inLibrary,\n          addToLibrary: () => handleShowFollow(SHOW_ID),\n          removeFromLibrary: () => handleShowUnfollow(SHOW_ID)\n        });\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [isFollowed]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const show = await Spotify.getShowDetails(SHOW_ID);\n        updateDetails({\n          name: show.name,\n          showId: show.id,\n          description: show.description,\n          external: show.external_urls.spotify,\n          type: SEARCH_TYPES.show,\n          publisher: show.publisher,\n          image: show.images[1].url,\n          episodes: show.episodes\n        });\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    details: details,\n    library: library,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EpisodesList, {\n    episodes: details.episodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Show);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","WorkspaceLoading","Details","EpisodesList","Show","location","details","updateDetails","library","updateLibrary","isFollowed","updateIsFollowed","isLoading","updateIsLoading","SHOW_ID","pathname","handleShowFollow","id","saveUserShow","handleShowUnfollow","removeUserShow","inLibrary","checkUserShow","addToLibrary","removeFromLibrary","err","Error","show","getShowDetails","name","showId","description","external","external_urls","spotify","type","publisher","image","images","url","episodes","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({ location }) => {\n    const [details, updateDetails] = useState({});\n    const [library, updateLibrary] = useState({});\n    const [isFollowed, updateIsFollowed] = useState(null);\n    const [isLoading, updateIsLoading] = useState(true);\n\n    const SHOW_ID = extractId(location.pathname);\n\n    const handleShowFollow = (id) => {\n        Spotify.saveUserShow(id);\n        updateIsFollowed(true);\n    };\n\n    const handleShowUnfollow = (id) => {\n        Spotify.removeUserShow(id);\n        updateIsFollowed(false);\n    };\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const inLibrary = await Spotify.checkUserShow(SHOW_ID);\n                updateLibrary({\n                    inLibrary,\n                    addToLibrary: () => handleShowFollow(SHOW_ID),\n                    removeFromLibrary: () => handleShowUnfollow(SHOW_ID)\n                });\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [isFollowed]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const show = await Spotify.getShowDetails(SHOW_ID);\n                updateDetails({\n                    name: show.name,\n                    showId: show.id,\n                    description: show.description,\n                    external: show.external_urls.spotify,\n                    type: SEARCH_TYPES.show,\n                    publisher: show.publisher,\n                    image: show.images[1].url,\n                    episodes: show.episodes,\n                });\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, []);\n\n    return (\n        <Fragment>\n            <Details details={details} library={library}/>\n            <EpisodesList episodes={details.episodes}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Show);"]},"metadata":{},"sourceType":"module"}