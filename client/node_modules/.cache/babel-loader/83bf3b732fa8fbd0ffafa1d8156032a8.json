{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { QueueContext } from '../../../contexts/QueueContextProvider';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nimport Controls from './Controls/Controls';\nimport Progress from './Progress/Progress';\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\nconst Episode = styled.div`\n    font-size: ${({\n  theme\n}) => theme.typography.small};\n    color: ${({\n  theme\n}) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        background-color: transparent;\n    }\n`;\nconst Placeholder = styled.div`\n    width: 50px;\n    height: 50px;\n    background-size: cover;\n`;\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = props => {\n  const [progressPercentage, updateProgressPercentage] = useState(0);\n  const {\n    currentEpisode,\n    loadQueueNext\n  } = useContext(QueueContext);\n  const {\n    updateAudio,\n    resetPlayer\n  } = useContext(PlayerContext);\n  const audioRef = useRef();\n  useEffect(() => {\n    updateAudio(audioRef.current);\n  }, []);\n  useEffect(() => {\n    if (progressPercentage === 100) {\n      loadQueueNext();\n    }\n  }, [progressPercentage]);\n  useEffect(() => {\n    resetPlayer();\n  }, [currentEpisode]);\n  return /*#__PURE__*/React.createElement(Element, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    src: currentEpisode === null || currentEpisode === void 0 ? void 0 : currentEpisode.audio_preview_url,\n    ref: audioRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Progress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Episode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, currentEpisode ? /*#__PURE__*/React.createElement(InternalLink, {\n    to: `/episodes/${currentEpisode.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Thumbnail, {\n    src: currentEpisode.images[0].url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Name, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, currentEpisode.name)) : /*#__PURE__*/React.createElement(Placeholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default Player;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js"],"names":["React","useState","useContext","useEffect","useRef","styled","Link","QueueContext","PlayerContext","Controls","Progress","Element","div","theme","colors","tertiary","Content","Episode","typography","small","specific","InternalLink","Thumbnail","img","Placeholder","Name","p","Player","props","progressPercentage","updateProgressPercentage","currentEpisode","loadQueueNext","updateAudio","resetPlayer","audioRef","current","audio_preview_url","id","images","url","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { QueueContext } from '../../../contexts/QueueContextProvider';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nimport Controls from './Controls/Controls';\nimport Progress from './Progress/Progress';\n\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\n\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\n\nconst Episode = styled.div`\n    font-size: ${({ theme }) => theme.typography.small};\n    color: ${({ theme }) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\n\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\n\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        background-color: transparent;\n    }\n`;\n\nconst Placeholder = styled.div`\n    width: 50px;\n    height: 50px;\n    background-size: cover;\n`;\n\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = (props) => {\n    const [progressPercentage, updateProgressPercentage] = useState(0);\n    const { currentEpisode, loadQueueNext } = useContext(QueueContext);\n    const { updateAudio, resetPlayer } = useContext(PlayerContext);\n    const audioRef = useRef();\n\n    useEffect(() => {\n        updateAudio(audioRef.current);\n    }, []);\n\n    useEffect(() => {\n        if (progressPercentage === 100) {\n            loadQueueNext();\n        }\n    }, [progressPercentage]);\n\n    useEffect(() => {\n        resetPlayer();\n    }, [currentEpisode]);\n\n    return (\n        <Element>\n            <audio src={currentEpisode?.audio_preview_url} ref={audioRef}/>\n            <Content>\n                <Controls/>\n                <Progress/>\n                <Episode>\n                    { currentEpisode ?\n                        <InternalLink to={`/episodes/${currentEpisode.id}`}>\n                            <Thumbnail src={currentEpisode.images[0].url}/>\n                            <Name>\n                                {currentEpisode.name}\n                            </Name>\n                        </InternalLink>\n                        :\n                        <Placeholder/>\n                    }\n                </Episode>\n            </Content>\n        </Element>\n    );\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}