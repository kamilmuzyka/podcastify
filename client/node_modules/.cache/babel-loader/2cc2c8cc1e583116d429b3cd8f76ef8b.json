{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Details/LibraryButton/LibraryButton.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from '../../../../UI/Button/Button';\nimport Spotify from '../../../../models/Spotify';\nimport { SEARCH_TYPES } from '../../../../constants';\n\nconst LibraryButton = ({\n  id,\n  inLibrary,\n  libraryType\n}) => {\n  let text;\n  let action;\n\n  const handleShowFollow = id => {\n    Spotify.saveUserShow(id);\n  };\n\n  const handleShowUnfollow = id => {\n    Spotify.removeUserShow(id);\n  };\n\n  const handleEpisodeLike = id => {};\n\n  const handleEpisodeRemove = id => {};\n\n  const checkLibrary = () => {\n    if (inLibrary && libraryType === SEARCH_TYPES.show) {\n      text = 'Unfollow';\n      action = handleShowUnfollow;\n    } else if (inLibrary && libraryType === SEARCH_TYPES.episode) {\n      text = 'Remove';\n      action = handleEpisodeRemove;\n    } else if (!inLibrary && libraryType === SEARCH_TYPES.show) {\n      text = 'Follow';\n      action = handleShowFollow;\n    } else if (!inLibrary && libraryType === SEARCH_TYPES.episode) {\n      text = 'Like';\n      action = handleEpisodeLike;\n    }\n  };\n\n  checkLibrary();\n  const [txt, updateTxt] = useState(text);\n  return /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: action,\n    outline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, txt);\n};\n\nexport default LibraryButton;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Details/LibraryButton/LibraryButton.js"],"names":["React","useState","useEffect","Button","Spotify","SEARCH_TYPES","LibraryButton","id","inLibrary","libraryType","text","action","handleShowFollow","saveUserShow","handleShowUnfollow","removeUserShow","handleEpisodeLike","handleEpisodeRemove","checkLibrary","show","episode","txt","updateTxt"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,YAAT,QAA6B,uBAA7B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,SAAN;AAAiBC,EAAAA;AAAjB,CAAD,KAAoC;AACtD,MAAIC,IAAJ;AACA,MAAIC,MAAJ;;AAEA,QAAMC,gBAAgB,GAAIL,EAAD,IAAQ;AAC7BH,IAAAA,OAAO,CAACS,YAAR,CAAqBN,EAArB;AACH,GAFD;;AAIA,QAAMO,kBAAkB,GAAIP,EAAD,IAAQ;AAC/BH,IAAAA,OAAO,CAACW,cAAR,CAAuBR,EAAvB;AACH,GAFD;;AAIA,QAAMS,iBAAiB,GAAIT,EAAD,IAAQ,CAEjC,CAFD;;AAIA,QAAMU,mBAAmB,GAAIV,EAAD,IAAQ,CAEnC,CAFD;;AAIA,QAAMW,YAAY,GAAG,MAAM;AACvB,QAAGV,SAAS,IAAIC,WAAW,KAAKJ,YAAY,CAACc,IAA7C,EAAmD;AAC/CT,MAAAA,IAAI,GAAG,UAAP;AACAC,MAAAA,MAAM,GAAGG,kBAAT;AACH,KAHD,MAGO,IAAGN,SAAS,IAAIC,WAAW,KAAKJ,YAAY,CAACe,OAA7C,EAAsD;AACzDV,MAAAA,IAAI,GAAG,QAAP;AACAC,MAAAA,MAAM,GAAGM,mBAAT;AACH,KAHM,MAGA,IAAG,CAACT,SAAD,IAAcC,WAAW,KAAKJ,YAAY,CAACc,IAA9C,EAAoD;AACvDT,MAAAA,IAAI,GAAG,QAAP;AACAC,MAAAA,MAAM,GAAGC,gBAAT;AACH,KAHM,MAGA,IAAG,CAACJ,SAAD,IAAcC,WAAW,KAAKJ,YAAY,CAACe,OAA9C,EAAuD;AAC1DV,MAAAA,IAAI,GAAG,MAAP;AACAC,MAAAA,MAAM,GAAGK,iBAAT;AACH;AACJ,GAdD;;AAgBAE,EAAAA,YAAY;AAEZ,QAAM,CAACG,GAAD,EAAMC,SAAN,IAAmBrB,QAAQ,CAACS,IAAD,CAAjC;AAEA,sBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEC,MAA/B;AAAuC,IAAA,OAAO,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKU,GADL,CADJ;AAKH,CA7CD;;AA+CA,eAAef,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '../../../../UI/Button/Button';\nimport Spotify from '../../../../models/Spotify';\nimport { SEARCH_TYPES } from '../../../../constants';\n\nconst LibraryButton = ({ id, inLibrary, libraryType }) => {\n    let text;\n    let action;\n\n    const handleShowFollow = (id) => {\n        Spotify.saveUserShow(id);\n    };\n\n    const handleShowUnfollow = (id) => {\n        Spotify.removeUserShow(id);\n    };\n\n    const handleEpisodeLike = (id) => {\n\n    }\n\n    const handleEpisodeRemove = (id) => {\n\n    }\n\n    const checkLibrary = () => {\n        if(inLibrary && libraryType === SEARCH_TYPES.show) {\n            text = 'Unfollow';\n            action = handleShowUnfollow;\n        } else if(inLibrary && libraryType === SEARCH_TYPES.episode) {\n            text = 'Remove';\n            action = handleEpisodeRemove;\n        } else if(!inLibrary && libraryType === SEARCH_TYPES.show) {\n            text = 'Follow';\n            action = handleShowFollow;\n        } else if(!inLibrary && libraryType === SEARCH_TYPES.episode) {\n            text = 'Like';\n            action = handleEpisodeLike;\n        }\n    }\n\n    checkLibrary();\n\n    const [txt, updateTxt] = useState(text);\n\n    return (\n        <Button type=\"button\" onClick={action} outline>\n            {txt}\n        </Button>\n    );\n}\n\nexport default LibraryButton;"]},"metadata":{},"sourceType":"module"}