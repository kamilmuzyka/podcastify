{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({\n  location\n}) => {\n  const [isLoading, updateIsLoading] = useState(true); // const [isFollowed, updateIsFollowed] = useState(null);\n\n  const [details, updateDetails] = useState({});\n\n  const handleShowFollow = id => {\n    Spotify.saveUserShow(id);\n    updateIsFollowed(true);\n  };\n\n  const handleShowUnfollow = id => {\n    Spotify.removeUserShow(id);\n    updateIsFollowed(false);\n  };\n\n  useEffect(() => {\n    (async () => {\n      const path = location.pathname;\n      const showId = extractId(path);\n\n      try {\n        const [show, isFollowed] = await Promise.all([Spotify.getShowDetails(showId), Spotify.checkUserShow(showId)]);\n        updateDetails({\n          name: show.name,\n          showId: show.id,\n          description: show.description,\n          external: show.external_urls.spotify,\n          type: SEARCH_TYPES.show,\n          publisher: show.publisher,\n          image: show.images[1].url,\n          episodes: show.episodes,\n          inLibrary: isFollowed,\n          addToLibrary: () => handleShowFollow(showId),\n          removeFromLibrary: () => handleShowUnfollow(showId)\n        });\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [location.pathname, details]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    payload: details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EpisodesList, {\n    episodes: details.episodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Show);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","WorkspaceLoading","Details","EpisodesList","Show","location","isLoading","updateIsLoading","details","updateDetails","handleShowFollow","id","saveUserShow","updateIsFollowed","handleShowUnfollow","removeUserShow","path","pathname","showId","show","isFollowed","Promise","all","getShowDetails","checkUserShow","name","description","external","external_urls","spotify","type","publisher","image","images","url","episodes","inLibrary","addToLibrary","removeFromLibrary","err","Error","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({ location }) => {\n    const [isLoading, updateIsLoading] = useState(true);\n    // const [isFollowed, updateIsFollowed] = useState(null);\n    const [details, updateDetails] = useState({});\n\n    const handleShowFollow = (id) => {\n        Spotify.saveUserShow(id);\n        updateIsFollowed(true);\n    };\n\n    const handleShowUnfollow = (id) => {\n        Spotify.removeUserShow(id)\n        updateIsFollowed(false);\n    };\n\n    useEffect(() => {\n        (async () => {\n            const path = location.pathname;\n            const showId = extractId(path);\n            try {\n                const [show, isFollowed] = await Promise.all([\n                    Spotify.getShowDetails(showId),\n                    Spotify.checkUserShow(showId)\n                ]);\n                updateDetails({\n                    name: show.name,\n                    showId: show.id,\n                    description: show.description,\n                    external: show.external_urls.spotify,\n                    type: SEARCH_TYPES.show,\n                    publisher: show.publisher,\n                    image: show.images[1].url,\n                    episodes: show.episodes,\n                    inLibrary: isFollowed,\n                    addToLibrary: () => handleShowFollow(showId),\n                    removeFromLibrary: () => handleShowUnfollow(showId)\n                });\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [location.pathname, details]);\n\n    return (\n        <Fragment>\n            <Details payload={details}/>\n            <EpisodesList episodes={details.episodes}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Show);"]},"metadata":{},"sourceType":"module"}