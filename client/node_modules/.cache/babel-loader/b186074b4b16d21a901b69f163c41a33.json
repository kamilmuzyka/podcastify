{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/contexts/PlayerContextProvider.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nexport const PlayerContext = createContext();\n\nconst PlayerContextProvider = props => {\n  const [queue, updateQueue] = useState([]);\n  const [queueHead, updateQueueHead] = useState(0);\n  const [currentEpisode, updateCurrentEpisode] = useState();\n\n  const loadQueue = (currentId, newQueue) => {\n    const currentIndex = newQueue.findIndex(episode => episode.id === currentId) || 0;\n    updateQueue(newQueue);\n    updateQueueHead(currentIndex);\n    updateCurrentEpisode(newQueue[currentIndex]);\n  };\n\n  const unshiftQueueHead = () => {\n    if (queueHead < queue.length) {\n      updateCurrentEpisode(queue[queueHead + 1]);\n      updateQueueHead(prev => prev + 1);\n    } else {\n      updateCurrentEpisode(0);\n      updateQueueHead(0);\n    }\n  };\n\n  const shiftQueueHead = () => {\n    if (queueHead > 0) {\n      updateCurrentEpisode(queue[queueHead - 1]);\n      updateQueueHead(prev => prev - 1);\n    } else {\n      updateCurrentEpisode(queue[queue.length - 1]);\n      updateQueueHead(queue.length - 1);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(PlayerContext.Provider, {\n    value: {\n      currentEpisode,\n      queueHead,\n      loadQueue,\n      unshiftQueueHead,\n      shiftQueueHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default PlayerContextProvider;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/contexts/PlayerContextProvider.js"],"names":["React","createContext","useState","useEffect","PlayerContext","PlayerContextProvider","props","queue","updateQueue","queueHead","updateQueueHead","currentEpisode","updateCurrentEpisode","loadQueue","currentId","newQueue","currentIndex","findIndex","episode","id","unshiftQueueHead","length","prev","shiftQueueHead","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AAEA,OAAO,MAAMC,aAAa,GAAGH,aAAa,EAAnC;;AAEP,MAAMI,qBAAqB,GAAIC,KAAD,IAAW;AACrC,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBN,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACO,SAAD,EAAYC,eAAZ,IAA+BR,QAAQ,CAAC,CAAD,CAA7C;AACA,QAAM,CAACS,cAAD,EAAiBC,oBAAjB,IAAyCV,QAAQ,EAAvD;;AAEA,QAAMW,SAAS,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AACzC,UAAMC,YAAY,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeL,SAA7C,KAA2D,CAAhF;AACAN,IAAAA,WAAW,CAACO,QAAD,CAAX;AACAL,IAAAA,eAAe,CAACM,YAAD,CAAf;AACAJ,IAAAA,oBAAoB,CAACG,QAAQ,CAACC,YAAD,CAAT,CAApB;AACD,GALD;;AAOA,QAAMI,gBAAgB,GAAG,MAAM;AAC7B,QAAIX,SAAS,GAAGF,KAAK,CAACc,MAAtB,EAA8B;AAC5BT,MAAAA,oBAAoB,CAACL,KAAK,CAACE,SAAS,GAAG,CAAb,CAAN,CAApB;AACAC,MAAAA,eAAe,CAACY,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAf;AACD,KAHD,MAGO;AACLV,MAAAA,oBAAoB,CAAC,CAAD,CAApB;AACAF,MAAAA,eAAe,CAAC,CAAD,CAAf;AACD;AACF,GARD;;AAUA,QAAMa,cAAc,GAAG,MAAM;AAC3B,QAAId,SAAS,GAAG,CAAhB,EAAmB;AACjBG,MAAAA,oBAAoB,CAACL,KAAK,CAACE,SAAS,GAAG,CAAb,CAAN,CAApB;AACAC,MAAAA,eAAe,CAACY,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAf;AACD,KAHD,MAGO;AACLV,MAAAA,oBAAoB,CAACL,KAAK,CAACA,KAAK,CAACc,MAAN,GAAe,CAAhB,CAAN,CAApB;AACAX,MAAAA,eAAe,CAACH,KAAK,CAACc,MAAN,GAAe,CAAhB,CAAf;AACD;AACF,GARD;;AAUA,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BV,MAAAA,cAD2B;AAE3BF,MAAAA,SAF2B;AAG3BI,MAAAA,SAH2B;AAI3BO,MAAAA,gBAJ2B;AAK3BG,MAAAA;AAL2B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKjB,KAAK,CAACkB,QAPX,CADJ;AAWH,CA3CD;;AA6CA,eAAenB,qBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const PlayerContext = createContext();\n\nconst PlayerContextProvider = (props) => {\n    const [queue, updateQueue] = useState([]);\n    const [queueHead, updateQueueHead] = useState(0);\n    const [currentEpisode, updateCurrentEpisode] = useState();\n\n    const loadQueue = (currentId, newQueue) => {\n      const currentIndex = newQueue.findIndex(episode => episode.id === currentId) || 0;\n      updateQueue(newQueue);\n      updateQueueHead(currentIndex);\n      updateCurrentEpisode(newQueue[currentIndex]);\n    }\n\n    const unshiftQueueHead = () => {\n      if (queueHead < queue.length) {\n        updateCurrentEpisode(queue[queueHead + 1]);\n        updateQueueHead(prev => prev + 1);\n      } else {\n        updateCurrentEpisode(0);\n        updateQueueHead(0);\n      }\n    }\n\n    const shiftQueueHead = () => {\n      if (queueHead > 0) {\n        updateCurrentEpisode(queue[queueHead - 1]);\n        updateQueueHead(prev => prev - 1);\n      } else {\n        updateCurrentEpisode(queue[queue.length - 1]);\n        updateQueueHead(queue.length - 1);\n      }\n    }\n\n    return (\n        <PlayerContext.Provider value={{\n            currentEpisode,\n            queueHead,\n            loadQueue,\n            unshiftQueueHead,\n            shiftQueueHead\n        }}>\n            {props.children}\n        </PlayerContext.Provider>\n    );\n}\n\nexport default PlayerContextProvider;"]},"metadata":{},"sourceType":"module"}