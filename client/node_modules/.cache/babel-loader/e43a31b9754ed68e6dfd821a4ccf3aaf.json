{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js\";\nimport React, { useState, useContext, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { QueueContext } from '../../../contexts/QueueContextProvider';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nimport PlayButton from '../../../UI/PlayButton/PlayButton';\nimport PauseButton from '../../../UI/PauseButton/PauseButton';\nimport SkipButton from '../../../UI/SkipButton/SkipButton';\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\nconst Progress = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\nconst Bar = styled.div`\n    width: ${({\n  percentage\n}) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\nconst Controls = styled.div`\n    display: flex;\n    align-items: center;\n    @media (min-width: 500px) {\n        order: 2;\n        flex: 1;\n        justify-content: center;\n    }\n    @media (min-width: 1380px) {\n        position: absolute;\n        top: 1.25em;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`;\nconst MiddleButton = styled.div`\n    display: inline-block;\n    margin: 0 1em;\n`;\nconst Episode = styled.div`\n    font-size: ${({\n  theme\n}) => theme.typography.small};\n    color: ${({\n  theme\n}) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        object-fit: cover;\n    }\n`;\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = props => {\n  // const [isPlaying, updateIsPlaying] = useState(false);\n  const [progressPercentage, updateProgressPercentage] = useState(0);\n  const {\n    loadQueueNext,\n    loadQueuePrevious,\n    currentEpisode\n  } = useContext(QueueContext);\n  const {\n    isPlaying,\n    startPlaying,\n    stopPlaying,\n    resetPlayer\n  } = useContext(PlayerContext);\n  const audioRef = useRef();\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const currentTime = audioRef.current.currentTime;\n      const duration = audioRef.current.duration;\n      const progress = Math.round(currentTime / duration * 100);\n      updateProgressPercentage(progress);\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []); // const startPlaying = () => {\n  //     audioRef.current.play();\n  //     updateIsPlaying(true);\n  // }\n  // const stopPlaying = () => {\n  //     audioRef.current.pause();\n  //     updateIsPlaying(false);\n  // }\n  // const resetPlayer = () => {\n  //     stopPlaying();\n  //     audioRef.current.currentTime = 0;\n  //     startPlaying();\n  // }\n  // const playNext = () => {\n  //     loadQueueNext();\n  // }\n  // const playPrevious = () => {\n  //     loadQueuePrevious();\n  // }\n\n  useEffect(() => {\n    resetPlayer(audioRef.current);\n  }, [currentEpisode]);\n  return /*#__PURE__*/React.createElement(Element, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Progress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    percentage: progressPercentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    src: currentEpisode === null || currentEpisode === void 0 ? void 0 : currentEpisode.audio_preview_url,\n    ref: audioRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(SkipButton, {\n    direction: \"backward\",\n    scale: 1.25,\n    onClick: () => playPrevious(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(MiddleButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, isPlaying ? /*#__PURE__*/React.createElement(PauseButton, {\n    scale: 1.25,\n    onClick: () => stopPlaying(audioRef.current),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(PlayButton, {\n    scale: 1.25,\n    onClick: () => startPlaying(audioRef.current),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(SkipButton, {\n    direction: \"forward\",\n    scale: 1.25,\n    onClick: () => playNext(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Episode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InternalLink, {\n    to: `/episodes/${currentEpisode === null || currentEpisode === void 0 ? void 0 : currentEpisode.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Thumbnail, {\n    src: currentEpisode === null || currentEpisode === void 0 ? void 0 : currentEpisode.images[0].url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Name, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 25\n    }\n  }, currentEpisode === null || currentEpisode === void 0 ? void 0 : currentEpisode.name)))));\n};\n\nexport default Player;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js"],"names":["React","useState","useContext","useRef","useEffect","styled","Link","QueueContext","PlayerContext","PlayButton","PauseButton","SkipButton","Element","div","theme","colors","tertiary","Progress","Bar","percentage","specific","Content","Controls","MiddleButton","Episode","typography","small","InternalLink","Thumbnail","img","Name","p","Player","props","progressPercentage","updateProgressPercentage","loadQueueNext","loadQueuePrevious","currentEpisode","isPlaying","startPlaying","stopPlaying","resetPlayer","audioRef","intervalId","setInterval","currentTime","current","duration","progress","Math","round","clearInterval","audio_preview_url","playPrevious","playNext","id","images","url","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { QueueContext } from '../../../contexts/QueueContextProvider';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nimport PlayButton from '../../../UI/PlayButton/PlayButton';\nimport PauseButton from '../../../UI/PauseButton/PauseButton';\nimport SkipButton from '../../../UI/SkipButton/SkipButton';\n\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\n\nconst Progress = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\n\nconst Bar = styled.div`\n    width: ${({ percentage }) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\n\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\n\nconst Controls = styled.div`\n    display: flex;\n    align-items: center;\n    @media (min-width: 500px) {\n        order: 2;\n        flex: 1;\n        justify-content: center;\n    }\n    @media (min-width: 1380px) {\n        position: absolute;\n        top: 1.25em;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`;\n\nconst MiddleButton = styled.div`\n    display: inline-block;\n    margin: 0 1em;\n`;\n\nconst Episode = styled.div`\n    font-size: ${({ theme }) => theme.typography.small};\n    color: ${({ theme }) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\n\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\n\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        object-fit: cover;\n    }\n`;\n\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = (props) => {\n    // const [isPlaying, updateIsPlaying] = useState(false);\n    const [progressPercentage, updateProgressPercentage] = useState(0);\n    const {\n        loadQueueNext,\n        loadQueuePrevious,\n        currentEpisode\n    } = useContext(QueueContext);\n\n    const { isPlaying, startPlaying, stopPlaying, resetPlayer } = useContext(PlayerContext);\n    const audioRef = useRef();\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            const currentTime = audioRef.current.currentTime;\n            const duration = audioRef.current.duration;\n            const progress = Math.round(currentTime / duration * 100);\n            updateProgressPercentage(progress);\n        }, 300);\n        return () => {\n            clearInterval(intervalId);\n        }\n    }, []);\n\n    // const startPlaying = () => {\n    //     audioRef.current.play();\n    //     updateIsPlaying(true);\n    // }\n\n    // const stopPlaying = () => {\n    //     audioRef.current.pause();\n    //     updateIsPlaying(false);\n    // }\n\n    // const resetPlayer = () => {\n    //     stopPlaying();\n    //     audioRef.current.currentTime = 0;\n    //     startPlaying();\n    // }\n\n    // const playNext = () => {\n    //     loadQueueNext();\n    // }\n\n    // const playPrevious = () => {\n    //     loadQueuePrevious();\n    // }\n\n    useEffect(() => {\n        resetPlayer(audioRef.current);\n    }, [currentEpisode]);\n\n    return (\n        <Element>\n            <Progress>\n                <Bar percentage={progressPercentage}/>\n            </Progress>\n            <Content>\n                <Controls>\n                    <audio src={currentEpisode?.audio_preview_url} ref={audioRef}/>\n                    <SkipButton direction=\"backward\" scale={1.25} onClick={() => playPrevious()}/>\n                    <MiddleButton>\n                        { isPlaying ?\n                            <PauseButton scale={1.25} onClick={() => stopPlaying(audioRef.current)} />\n                            :\n                            <PlayButton scale={1.25} onClick={() => startPlaying(audioRef.current)} />\n                        }\n                    </MiddleButton>\n                    <SkipButton direction=\"forward\" scale={1.25} onClick={() => playNext()}/>\n                </Controls>\n                <Episode>\n                    <InternalLink to={`/episodes/${currentEpisode?.id}`}>\n                        <Thumbnail src={currentEpisode?.images[0].url}/>\n                        <Name>\n                            {currentEpisode?.name}\n                        </Name>\n                    </InternalLink>\n                </Episode>\n            </Content>\n        </Element>\n    );\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}