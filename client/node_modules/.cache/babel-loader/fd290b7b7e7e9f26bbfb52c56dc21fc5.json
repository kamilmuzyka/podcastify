{"ast":null,"code":"class Spotify {\n  static retrieveAccessToken() {\n    const access = localStorage.getItem('access');\n\n    if (!access) {\n      throw new Error('No access token found');\n    }\n\n    const {\n      token\n    } = JSON.parse(access);\n    return token;\n  }\n\n  static async validateResponse(response) {\n    const result = await response.json();\n\n    if (!response.ok) {\n      throw new Error(result.error.message);\n    } else {\n      return result;\n    }\n  }\n\n  static async getSearchResults(query) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=show,episode&limit=50`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return this.validateResponse(response);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getShowDetails(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/shows/${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return this.validateResponse(response);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getEpisodeDetails(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/episodes/${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return this.validateResponse(response);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getUserProfile() {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return this.validateResponse(response);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getUserShows() {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/shows?limit=50`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return this.validateResponse(response);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async checkUserShow(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/shows/contains?ids=${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return this.validateResponse(response);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async saveUserShow(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/shows?ids=${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        },\n        method: 'PUT'\n      });\n      return this.validateResponse(response);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async removeUserShow(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/shows?ids=${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        },\n        method: 'DELETE'\n      });\n      console.log(await response.json());\n      return this.validateResponse(response);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/models/Spotify.js"],"names":["Spotify","retrieveAccessToken","access","localStorage","getItem","Error","token","JSON","parse","validateResponse","response","result","json","ok","error","message","getSearchResults","query","fetch","headers","err","getShowDetails","id","getEpisodeDetails","getUserProfile","getUserShows","checkUserShow","saveUserShow","method","removeUserShow","console","log"],"mappings":"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","sourcesContent":["class Spotify {\n    static retrieveAccessToken() {\n        const access = localStorage.getItem('access');\n        if (!access) {\n            throw new Error('No access token found');\n        }\n        const { token } = JSON.parse(access);\n        return token;\n    }\n\n    static async validateResponse(response) {\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(result.error.message);\n        } else {\n            return result;\n        }\n    }\n\n    static async getSearchResults(query) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=show,episode&limit=50`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return this.validateResponse(response);\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getShowDetails(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/shows/${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return this.validateResponse(response);\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getEpisodeDetails(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/episodes/${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return this.validateResponse(response);\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getUserProfile() {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return this.validateResponse(response);\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getUserShows() {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me/shows?limit=50`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return this.validateResponse(response);\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async checkUserShow(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me/shows/contains?ids=${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return this.validateResponse(response);\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async saveUserShow(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me/shows?ids=${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'PUT'\n            });\n            return this.validateResponse(response);\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async removeUserShow(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me/shows?ids=${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'DELETE'\n            });\n            console.log(await response.json());\n            return this.validateResponse(response);\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}