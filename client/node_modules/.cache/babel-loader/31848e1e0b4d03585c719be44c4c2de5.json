{"ast":null,"code":"import _slicedToArray from\"/Users/kamil.muzyka/Desktop/podcastify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/kamil.muzyka/Desktop/podcastify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n    width: \",\"%;\\n    height: 100%;\\n    background-color: \",\";\\n    transition: width 0.3s linear;\\n\\n    @media (min-width: 1380px) {\\n        border-radius: 2.5px;\\n    }\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    width: 100%;\\n    height: 5px;\\n    background-color: #414141;\\n    @media (min-width: 1380px) {\\n        position: absolute;\\n        bottom: 1.5em;\\n        left: 50%;\\n        transform: translateX(-50%);\\n        max-width: 700px;\\n        border-radius: 2.5px;\\n    }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useEffect,useContext}from'react';import styled from'styled-components';import{PlayerContext}from'../../../../contexts/PlayerContextProvider';var Element=styled.div(_templateObject());var Bar=styled.div(_templateObject2(),function(_ref){var percentage=_ref.percentage;return percentage?percentage:0;},function(_ref2){var theme=_ref2.theme;return theme.colors.specific;});var Progress=function Progress(_ref3){var audio=_ref3.audio;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),progressPercentage=_useState2[0],updateProgressPercentage=_useState2[1];var _useContext=useContext(PlayerContext),playNext=_useContext.playNext;var refreshProgressBar=function refreshProgressBar(){if(audio){var currentTime=audio.currentTime;var duration=audio.duration;var progress=Math.round(currentTime/duration*100);updateProgressPercentage(progress);}};useEffect(function(){var intervalId=setInterval(refreshProgressBar,300);return function(){clearInterval(intervalId);};},[audio]);useEffect(function(){if(progressPercentage===100){playNext();}},[progressPercentage]);return/*#__PURE__*/React.createElement(Element,null,/*#__PURE__*/React.createElement(Bar,{percentage:progressPercentage}));};export default Progress;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Progress/Progress.js"],"names":["React","useState","useEffect","useContext","styled","PlayerContext","Element","div","Bar","percentage","theme","colors","specific","Progress","audio","progressPercentage","updateProgressPercentage","playNext","refreshProgressBar","currentTime","duration","progress","Math","round","intervalId","setInterval","clearInterval"],"mappings":"oiCAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,UAArC,KAAuD,OAAvD,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,aAAT,KAA8B,4CAA9B,CAEA,GAAMC,CAAAA,OAAO,CAAGF,MAAM,CAACG,GAAV,mBAAb,CAcA,GAAMC,CAAAA,GAAG,CAAGJ,MAAM,CAACG,GAAV,oBACI,kBAAGE,CAAAA,UAAH,MAAGA,UAAH,OAAoBA,CAAAA,UAAU,CAAGA,UAAH,CAAgB,CAA9C,EADJ,CAGe,mBAAGC,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,MAAN,CAAaC,QAA5B,EAHf,CAAT,CAWA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,OAAe,IAAZC,CAAAA,KAAY,OAAZA,KAAY,eAC2Bb,QAAQ,CAAC,CAAD,CADnC,wCACrBc,kBADqB,eACDC,wBADC,+BAEPb,UAAU,CAACE,aAAD,CAFH,CAEpBY,QAFoB,aAEpBA,QAFoB,CAI5B,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC7B,GAAIJ,KAAJ,CAAW,CACP,GAAMK,CAAAA,WAAW,CAAGL,KAAK,CAACK,WAA1B,CACA,GAAMC,CAAAA,QAAQ,CAAGN,KAAK,CAACM,QAAvB,CACA,GAAMC,CAAAA,QAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWJ,WAAW,CAAGC,QAAd,CAAyB,GAApC,CAAjB,CACAJ,wBAAwB,CAACK,QAAD,CAAxB,CACH,CACJ,CAPD,CASAnB,SAAS,CAAC,UAAM,CACZ,GAAMsB,CAAAA,UAAU,CAAGC,WAAW,CAACP,kBAAD,CAAqB,GAArB,CAA9B,CACA,MAAO,WAAM,CACTQ,aAAa,CAACF,UAAD,CAAb,CACH,CAFD,CAGH,CALQ,CAKN,CAACV,KAAD,CALM,CAAT,CAOAZ,SAAS,CAAC,UAAM,CACZ,GAAIa,kBAAkB,GAAK,GAA3B,CAAgC,CAC5BE,QAAQ,GACX,CACJ,CAJQ,CAIN,CAACF,kBAAD,CAJM,CAAT,CAMA,mBACI,oBAAC,OAAD,mBACI,oBAAC,GAAD,EAAK,UAAU,CAAEA,kBAAjB,EADJ,CADJ,CAKH,CA/BD,CAiCA,cAAeF,CAAAA,QAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport { PlayerContext } from '../../../../contexts/PlayerContextProvider';\n\nconst Element = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\n\nconst Bar = styled.div`\n    width: ${({ percentage }) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\n\nconst Progress = ({ audio }) => {\n    const [progressPercentage, updateProgressPercentage] = useState(0);\n    const { playNext } = useContext(PlayerContext);\n\n    const refreshProgressBar = () => {\n        if (audio) {\n            const currentTime = audio.currentTime;\n            const duration = audio.duration;\n            const progress = Math.round(currentTime / duration * 100);\n            updateProgressPercentage(progress);\n        }\n    }\n\n    useEffect(() => {\n        const intervalId = setInterval(refreshProgressBar, 300);\n        return () => {\n            clearInterval(intervalId);\n        }\n    }, [audio]);\n\n    useEffect(() => {\n        if (progressPercentage === 100) {\n            playNext();\n        }\n    }, [progressPercentage]);\n\n    return (\n        <Element>\n            <Bar percentage={progressPercentage}/>\n        </Element>\n    );\n}\n\nexport default Progress;"]},"metadata":{},"sourceType":"module"}