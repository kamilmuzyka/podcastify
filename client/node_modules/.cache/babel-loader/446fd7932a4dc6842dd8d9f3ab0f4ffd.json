{"ast":null,"code":"const settings = {\n  clientID: 'c9587c71088b4ad78b3f54fda5ba1544',\n  redirectURI: 'http://localhost:3000/'\n};\n\nclass Auth {\n  static logIn() {\n    const params = new URLSearchParams({\n      client_id: settings.clientID,\n      redirect_uri: settings.redirectURI,\n      response_type: 'token'\n    }).toString();\n    window.location.href = 'https://accounts.spotify.com/authorize?' + params;\n  }\n\n  static check() {\n    function accessDataAvailable() {\n      const access = JSON.parse(localStorage.getItem('access'));\n\n      if (access) {\n        const expires = access.expires;\n        const now = new Date().getTime();\n        return now < expires ? true : false;\n      }\n\n      return false;\n    }\n\n    function hashAvailable() {\n      const hash = window.location.hash;\n      return hash ? true : false;\n    }\n\n    if (accessDataAvailable()) {\n      return true;\n    }\n\n    if (hashAvailable()) {\n      const hash = window.location.hash;\n      const replaced = hash.replace('#', '?');\n      const params = new URLSearchParams(replaced);\n      const token = params.get('access_token');\n      const expiresAddOn = params.get('expires_in') * 1000;\n      const expiresBase = +new Date().getTime();\n      const expires = expiresBase + expiresAddOn;\n      localStorage.setItem('access', JSON.stringify({\n        token,\n        expires\n      }));\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/controllers/Auth.js"],"names":["settings","clientID","redirectURI","Auth","logIn","params","URLSearchParams","client_id","redirect_uri","response_type","toString","window","location","href","check","accessDataAvailable","access","JSON","parse","localStorage","getItem","expires","now","Date","getTime","hashAvailable","hash","replaced","replace","token","get","expiresAddOn","expiresBase","setItem","stringify"],"mappings":"AAAA,MAAMA,QAAQ,GAAG;AACbC,EAAAA,QAAQ,EAAE,kCADG;AAEbC,EAAAA,WAAW,EAAE;AAFA,CAAjB;;AAKA,MAAMC,IAAN,CAAW;AACP,SAAOC,KAAP,GAAe;AACX,UAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoB;AAC/BC,MAAAA,SAAS,EAAEP,QAAQ,CAACC,QADW;AAE/BO,MAAAA,YAAY,EAAER,QAAQ,CAACE,WAFQ;AAG/BO,MAAAA,aAAa,EAAE;AAHgB,KAApB,EAIZC,QAJY,EAAf;AAKAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,4CAA4CR,MAAnE;AACH;;AAED,SAAOS,KAAP,GAAe;AACX,aAASC,mBAAT,GAA+B;AAC3B,YAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAf;;AACA,UAAIJ,MAAJ,EAAY;AACR,cAAMK,OAAO,GAAGL,MAAM,CAACK,OAAvB;AACA,cAAMC,GAAG,GAAI,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAZ;AACA,eAAQF,GAAG,GAAGD,OAAP,GAAkB,IAAlB,GAAyB,KAAhC;AACH;;AACD,aAAO,KAAP;AACH;;AAED,aAASI,aAAT,GAAyB;AACrB,YAAMC,IAAI,GAAGf,MAAM,CAACC,QAAP,CAAgBc,IAA7B;AACA,aAAOA,IAAI,GAAG,IAAH,GAAU,KAArB;AACH;;AAED,QAAIX,mBAAmB,EAAvB,EAA2B;AACvB,aAAO,IAAP;AACH;;AAED,QAAIU,aAAa,EAAjB,EAAqB;AACjB,YAAMC,IAAI,GAAGf,MAAM,CAACC,QAAP,CAAgBc,IAA7B;AACA,YAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAjB;AACA,YAAMvB,MAAM,GAAG,IAAIC,eAAJ,CAAoBqB,QAApB,CAAf;AACA,YAAME,KAAK,GAAGxB,MAAM,CAACyB,GAAP,CAAW,cAAX,CAAd;AACA,YAAMC,YAAY,GAAG1B,MAAM,CAACyB,GAAP,CAAW,YAAX,IAA2B,IAAhD;AACA,YAAME,WAAW,GAAG,CAAG,IAAIT,IAAJ,EAAD,CAAaC,OAAb,EAAtB;AACA,YAAMH,OAAO,GAAGW,WAAW,GAAGD,YAA9B;AACAZ,MAAAA,YAAY,CAACc,OAAb,CAAqB,QAArB,EAA+BhB,IAAI,CAACiB,SAAL,CAAe;AAC1CL,QAAAA,KAD0C;AAE1CR,QAAAA;AAF0C,OAAf,CAA/B;AAIA,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AA9CM;;AAiDX,eAAelB,IAAf","sourcesContent":["const settings = {\n    clientID: 'c9587c71088b4ad78b3f54fda5ba1544',\n    redirectURI: 'http://localhost:3000/'\n}\n\nclass Auth {\n    static logIn() {\n        const params = new URLSearchParams({\n            client_id: settings.clientID,\n            redirect_uri: settings.redirectURI,\n            response_type: 'token'\n        }).toString();\n        window.location.href = 'https://accounts.spotify.com/authorize?' + params;\n    }\n\n    static check() {\n        function accessDataAvailable() {\n            const access = JSON.parse(localStorage.getItem('access'));\n            if (access) {\n                const expires = access.expires;\n                const now = (new Date()).getTime();\n                return (now < expires) ? true : false;\n            }\n            return false;\n        }\n\n        function hashAvailable() {\n            const hash = window.location.hash;\n            return hash ? true : false;\n        }\n\n        if (accessDataAvailable()) {\n            return true;\n        }\n\n        if (hashAvailable()) {\n            const hash = window.location.hash;\n            const replaced = hash.replace('#', '?');\n            const params = new URLSearchParams(replaced);\n            const token = params.get('access_token');\n            const expiresAddOn = params.get('expires_in') * 1000;\n            const expiresBase = + (new Date()).getTime();\n            const expires = expiresBase + expiresAddOn;\n            localStorage.setItem('access', JSON.stringify({\n                token,\n                expires\n            }));\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}