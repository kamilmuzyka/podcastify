{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Details/Details.js\";\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { SEARCH_TYPES } from '../../../constants';\nimport Accordion from '../../../UI/Accordion/Accordion';\nimport Button from '../../../UI/Button/Button';\nconst Element = styled.div`\n    position: relative;\n`;\nconst Image = styled.img`\nposition: relative;\n\n    display: block;\n    width: 100%;\n    object-fit: contain;\n\n    @media (min-width: 500px) {\n        max-width: 250px;\n    }\n`;\nconst Header = styled.header``;\nconst Lead = styled.h2`\n    position: relative;\n    font-size: 2em;\n    color: ${({\n  theme\n}) => theme.colors.positive};\n`;\nconst Label = styled.p`\n    font-size: ${({\n  theme\n}) => theme.typography.small};\n    color: ${({\n  theme\n}) => theme.colors.specific};\n    font-weight: 400;\n`;\nconst Type = styled(Label)`\n    margin: 1em 0 0.5em 0;\n`;\nconst Publisher = styled(Label)`\n    margin: 0.5em 0 1em 0;\n`;\nconst Description = styled(Accordion)`\n    color: ${({\n  theme\n}) => theme.colors.specific};\n`;\nconst Controls = styled.div`\n    margin-top: 1em;\n`;\nconst Link = styled.a`\n    margin-left: 1em;\n    text-decoration: none;\n    color: ${({\n  theme\n}) => theme.colors.specific};\n\n    &:hover {\n        text-decoration: underline;\n    }\n`;\nconst Split = styled.div`\n    @media (min-width: 1024px) {\n        display: flex;\n    }\n`;\nconst Content = styled.div`\n    @media (min-width: 1024px) {\n        margin-left: 3em;\n    }\n`;\n\nconst Details = ({\n  name,\n  publisher,\n  source,\n  description,\n  image,\n  type\n}) => {\n  return /*#__PURE__*/React.createElement(Element, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Split, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    src: image,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Type, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, type[0].toUpperCase() + type.substring(1)), /*#__PURE__*/React.createElement(Lead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, name), /*#__PURE__*/React.createElement(Publisher, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, \"By \", publisher)), /*#__PURE__*/React.createElement(Description, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, description), /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, \"Follow\"), /*#__PURE__*/React.createElement(Link, {\n    href: source,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }, \"Listen on Spotify\")))));\n};\n\nDetails.propTypes = {\n  type: PropTypes.oneOf([SEARCH_TYPES.show, SEARCH_TYPES.episode])\n};\nexport default Details;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Details/Details.js"],"names":["React","Fragment","styled","PropTypes","SEARCH_TYPES","Accordion","Button","Element","div","Image","img","Header","header","Lead","h2","theme","colors","positive","Label","p","typography","small","specific","Type","Publisher","Description","Controls","Link","a","Split","Content","Details","name","publisher","source","description","image","type","toUpperCase","substring","propTypes","oneOf","show","episode"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { SEARCH_TYPES } from '../../../constants';\nimport Accordion from '../../../UI/Accordion/Accordion';\nimport Button from '../../../UI/Button/Button';\n\nconst Element = styled.div`\n    position: relative;\n`;\n\nconst Image = styled.img`\nposition: relative;\n\n    display: block;\n    width: 100%;\n    object-fit: contain;\n\n    @media (min-width: 500px) {\n        max-width: 250px;\n    }\n`;\n\nconst Header = styled.header``;\n\nconst Lead = styled.h2`\n    position: relative;\n    font-size: 2em;\n    color: ${({ theme }) => theme.colors.positive};\n`;\n\nconst Label = styled.p`\n    font-size: ${({ theme }) => theme.typography.small};\n    color: ${({ theme }) => theme.colors.specific};\n    font-weight: 400;\n`;\n\nconst Type = styled(Label)`\n    margin: 1em 0 0.5em 0;\n`;\n\nconst Publisher = styled(Label)`\n    margin: 0.5em 0 1em 0;\n`;\n\nconst Description = styled(Accordion)`\n    color: ${({ theme }) => theme.colors.specific};\n`;\n\nconst Controls = styled.div`\n    margin-top: 1em;\n`;\n\nconst Link = styled.a`\n    margin-left: 1em;\n    text-decoration: none;\n    color: ${({ theme }) => theme.colors.specific};\n\n    &:hover {\n        text-decoration: underline;\n    }\n`;\n\nconst Split = styled.div`\n    @media (min-width: 1024px) {\n        display: flex;\n    }\n`;\n\nconst Content = styled.div`\n    @media (min-width: 1024px) {\n        margin-left: 3em;\n    }\n`;\n\nconst Details = ({ name, publisher, source, description, image, type }) => {\n\n    return (\n        <Element>\n            <Split>\n                <Image src={image} alt=\"\" />\n                <Content>\n                    <Header>\n                        <Type>\n                            {type[0].toUpperCase() + type.substring(1)}\n                        </Type>\n\n                        <Lead>{name}</Lead>\n\n                        <Publisher>\n                            By {publisher}\n                        </Publisher>\n                    </Header>\n                    <Description>{description}</Description>\n                    <Controls>\n                        <Button type=\"button\">Follow</Button>\n                        <Link href={source}>Listen on Spotify</Link>\n                    </Controls>\n                </Content>\n            </Split>\n        </Element>\n    );\n}\n\nDetails.propTypes = {\n    type: PropTypes.oneOf([SEARCH_TYPES.show, SEARCH_TYPES.episode])\n}\n\nexport default Details;"]},"metadata":{},"sourceType":"module"}