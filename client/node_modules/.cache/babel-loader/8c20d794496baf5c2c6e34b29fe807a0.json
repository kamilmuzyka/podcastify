{"ast":null,"code":"import _slicedToArray from\"/Users/kamil.muzyka/Desktop/podcastify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useState}from'react';export var QueueContext=createContext();var QueueContextProvider=function QueueContextProvider(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),queue=_useState2[0],updateQueue=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),queueHead=_useState4[0],updateQueueHead=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),currentEpisode=_useState6[0],updateCurrentEpisode=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),currentShow=_useState8[0],updateCurrentShow=_useState8[1];var loadQueue=function loadQueue(currentEpisodeId,currentShowId,currentShowEpisodes){var currentIndex=currentShowEpisodes.findIndex(function(episode){return episode.id===currentEpisodeId;})||0;updateQueue(currentShowEpisodes);updateQueueHead(currentIndex);updateCurrentEpisode(currentShowEpisodes[currentIndex]);updateCurrentShow(currentShowId);};var loadQueueNext=function loadQueueNext(){if(queueHead<queue.length-1){updateCurrentEpisode(queue[queueHead+1]);updateQueueHead(function(prev){return prev+1;});}else{updateCurrentEpisode(queue[0]);updateQueueHead(0);}};var loadQueuePrevious=function loadQueuePrevious(){if(queueHead>0){updateCurrentEpisode(queue[queueHead-1]);updateQueueHead(function(prev){return prev-1;});}else{updateCurrentEpisode(queue[queue.length-1]);updateQueueHead(queue.length-1);}};return/*#__PURE__*/React.createElement(QueueContext.Provider,{value:{queue:queue,queueHead:queueHead,currentEpisode:currentEpisode,currentShow:currentShow,loadQueue:loadQueue,loadQueueNext:loadQueueNext,loadQueuePrevious:loadQueuePrevious}},props.children);};export default QueueContextProvider;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/contexts/QueueContextProvider.js"],"names":["React","createContext","useState","QueueContext","QueueContextProvider","props","queue","updateQueue","queueHead","updateQueueHead","currentEpisode","updateCurrentEpisode","currentShow","updateCurrentShow","loadQueue","currentEpisodeId","currentShowId","currentShowEpisodes","currentIndex","findIndex","episode","id","loadQueueNext","length","prev","loadQueuePrevious","children"],"mappings":"6JAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,QAA/B,KAA+C,OAA/C,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGF,aAAa,EAAlC,CAEP,GAAMG,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,KAAD,CAAW,eACPH,QAAQ,CAAC,EAAD,CADD,wCAC7BI,KAD6B,eACtBC,WADsB,8BAECL,QAAQ,CAAC,CAAD,CAFT,yCAE7BM,SAF6B,eAElBC,eAFkB,8BAGWP,QAAQ,EAHnB,yCAG7BQ,cAH6B,eAGbC,oBAHa,8BAIKT,QAAQ,EAJb,yCAI7BU,WAJ6B,eAIhBC,iBAJgB,eAMpC,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,gBAAD,CAAmBC,aAAnB,CAAkCC,mBAAlC,CAA0D,CAC1E,GAAMC,CAAAA,YAAY,CAAGD,mBAAmB,CACrCE,SADkB,CACR,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,EAAR,GAAeN,gBAAnB,EADC,GACuC,CAD5D,CAEAR,WAAW,CAACU,mBAAD,CAAX,CACAR,eAAe,CAACS,YAAD,CAAf,CACAP,oBAAoB,CAACM,mBAAmB,CAACC,YAAD,CAApB,CAApB,CACAL,iBAAiB,CAACG,aAAD,CAAjB,CACD,CAPD,CASA,GAAMM,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAId,SAAS,CAAGF,KAAK,CAACiB,MAAN,CAAe,CAA/B,CAAkC,CAChCZ,oBAAoB,CAACL,KAAK,CAACE,SAAS,CAAG,CAAb,CAAN,CAApB,CACAC,eAAe,CAAC,SAAAe,IAAI,QAAIA,CAAAA,IAAI,CAAG,CAAX,EAAL,CAAf,CACD,CAHD,IAGO,CACLb,oBAAoB,CAACL,KAAK,CAAC,CAAD,CAAN,CAApB,CACAG,eAAe,CAAC,CAAD,CAAf,CACD,CACF,CARD,CAUA,GAAMgB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,GAAIjB,SAAS,CAAG,CAAhB,CAAmB,CACjBG,oBAAoB,CAACL,KAAK,CAACE,SAAS,CAAG,CAAb,CAAN,CAApB,CACAC,eAAe,CAAC,SAAAe,IAAI,QAAIA,CAAAA,IAAI,CAAG,CAAX,EAAL,CAAf,CACD,CAHD,IAGO,CACLb,oBAAoB,CAACL,KAAK,CAACA,KAAK,CAACiB,MAAN,CAAe,CAAhB,CAAN,CAApB,CACAd,eAAe,CAACH,KAAK,CAACiB,MAAN,CAAe,CAAhB,CAAf,CACD,CACF,CARD,CAUA,mBACI,oBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAC1BjB,KAAK,CAALA,KAD0B,CAE1BE,SAAS,CAATA,SAF0B,CAG1BE,cAAc,CAAdA,cAH0B,CAI1BE,WAAW,CAAXA,WAJ0B,CAK1BE,SAAS,CAATA,SAL0B,CAM1BQ,aAAa,CAAbA,aAN0B,CAO1BG,iBAAiB,CAAjBA,iBAP0B,CAA9B,EASKpB,KAAK,CAACqB,QATX,CADJ,CAaH,CAhDD,CAkDA,cAAetB,CAAAA,oBAAf","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const QueueContext = createContext();\n\nconst QueueContextProvider = (props) => {\n    const [queue, updateQueue] = useState([]);\n    const [queueHead, updateQueueHead] = useState(0);\n    const [currentEpisode, updateCurrentEpisode] = useState();\n    const [currentShow, updateCurrentShow] = useState();\n\n    const loadQueue = (currentEpisodeId, currentShowId, currentShowEpisodes) => {\n      const currentIndex = currentShowEpisodes\n        .findIndex(episode => episode.id === currentEpisodeId) || 0;\n      updateQueue(currentShowEpisodes);\n      updateQueueHead(currentIndex);\n      updateCurrentEpisode(currentShowEpisodes[currentIndex]);\n      updateCurrentShow(currentShowId);\n    }\n\n    const loadQueueNext = () => {\n      if (queueHead < queue.length - 1) {\n        updateCurrentEpisode(queue[queueHead + 1]);\n        updateQueueHead(prev => prev + 1);\n      } else {\n        updateCurrentEpisode(queue[0]);\n        updateQueueHead(0);\n      }\n    }\n\n    const loadQueuePrevious = () => {\n      if (queueHead > 0) {\n        updateCurrentEpisode(queue[queueHead - 1]);\n        updateQueueHead(prev => prev - 1);\n      } else {\n        updateCurrentEpisode(queue[queue.length - 1]);\n        updateQueueHead(queue.length - 1);\n      }\n    }\n\n    return (\n        <QueueContext.Provider value={{\n            queue,\n            queueHead,\n            currentEpisode,\n            currentShow,\n            loadQueue,\n            loadQueueNext,\n            loadQueuePrevious\n        }}>\n            {props.children}\n        </QueueContext.Provider>\n    );\n}\n\nexport default QueueContextProvider;"]},"metadata":{},"sourceType":"module"}