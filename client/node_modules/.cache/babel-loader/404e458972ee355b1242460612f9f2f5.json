{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport Tiles from '../../Tiles/Tiles';\nimport Tile from '../../Tiles/Tile/Tile';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst selectCorrespondingEpisodes = (currentEpisodeId, episodes) => {\n  let episodesRangeBeginningIndex = 0;\n  const episodesToDisplay = 4;\n  const currentEpisodeIndex = episodes.findIndex(episode => episode.id === currentEpisodeId);\n\n  if (currentEpisodeIndex !== -1 && currentEpisodeIndex >= episodesToDisplay) {\n    episodesRangeBeginningIndex = currentEpisodeIndex;\n  }\n\n  return episodes.splice(episodesRangeBeginningIndex - episodesToDisplay, episodesToDisplay).reverse();\n};\n\nconst Episode = ({\n  location\n}) => {\n  const EPISODE_ID = extractId(location.pathname);\n  const [isLoading, updateIsLoading] = useState(true);\n  const [library, updateLibrary] = useState({});\n  const [details, updateDetails] = useState({});\n  const [episodes, updateEpisodes] = useState([]);\n\n  const handleEpisodeLike = id => {\n    console.log(`Episode added to the library [${id}]`);\n  };\n\n  const handleEpisodeRemoval = id => {\n    console.log(`Episode removed from the library [${id}]`);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (Object.keys(details).length === 0) {\n          const episode = await Spotify.getEpisodeDetails(EPISODE_ID);\n          const show = await Spotify.getShowDetails(episode.show.id);\n          const moreEpisodes = selectCorrespondingEpisodes(EPISODE_ID, show.episodes.items);\n          updateDetails({\n            name: episode.name,\n            description: episode.description,\n            external: episode.external_urls.spotify,\n            type: SEARCH_TYPES.episode,\n            image: episode.images[1].url,\n            showName: episode.show.name,\n            showId: episode.show.id,\n            releaseDate: episode.release_date,\n            duration: episode.duration_ms\n          });\n          updateLibrary({\n            inLibrary: false,\n            addToLibraryText: 'Like',\n            removeFromLibraryText: 'Remove',\n            addToLibrary: () => handleEpisodeLike(EPISODE_ID),\n            removeFromLibrary: () => handleEpisodeRemoval(EPISODE_ID)\n          });\n          updateEpisodes(moreEpisodes);\n        } else {\n          const inLibrary = false;\n          updateLibrary(prev => {\n            return { ...prev,\n              inLibrary\n            };\n          });\n        }\n\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [location.pathname]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    details: details,\n    library: library,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tiles, {\n    title: \"More episodes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, episodes ? episodes.map(episode => {\n    return /*#__PURE__*/React.createElement(Tile, {\n      key: episode.id,\n      id: episode.id,\n      title: episode.name,\n      description: episode.description,\n      image: episode.images[1].url,\n      type: SEARCH_TYPES.episode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 32\n      }\n    });\n  }) : null), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Episode);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","Details","Tiles","Tile","WorkspaceLoading","selectCorrespondingEpisodes","currentEpisodeId","episodes","episodesRangeBeginningIndex","episodesToDisplay","currentEpisodeIndex","findIndex","episode","id","splice","reverse","Episode","location","EPISODE_ID","pathname","isLoading","updateIsLoading","library","updateLibrary","details","updateDetails","updateEpisodes","handleEpisodeLike","console","log","handleEpisodeRemoval","Object","keys","length","getEpisodeDetails","show","getShowDetails","moreEpisodes","items","name","description","external","external_urls","spotify","type","image","images","url","showName","showId","releaseDate","release_date","duration","duration_ms","inLibrary","addToLibraryText","removeFromLibraryText","addToLibrary","removeFromLibrary","prev","err","Error","map","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport Tiles from '../../Tiles/Tiles';\nimport Tile from '../../Tiles/Tile/Tile';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst selectCorrespondingEpisodes = (currentEpisodeId, episodes) => {\n    let episodesRangeBeginningIndex = 0;\n    const episodesToDisplay = 4;\n    const currentEpisodeIndex = episodes\n        .findIndex(episode => episode.id === currentEpisodeId);\n    if (currentEpisodeIndex !== -1 && currentEpisodeIndex >= episodesToDisplay) {\n        episodesRangeBeginningIndex = currentEpisodeIndex;\n    }\n    return episodes\n        .splice(episodesRangeBeginningIndex - episodesToDisplay, episodesToDisplay)\n        .reverse();\n}\n\nconst Episode = ({ location }) => {\n    const EPISODE_ID = extractId(location.pathname);\n    const [isLoading, updateIsLoading] = useState(true);\n    const [library, updateLibrary] = useState({});\n    const [details, updateDetails] = useState({});\n    const [episodes, updateEpisodes] = useState([]);\n\n    const handleEpisodeLike = (id) => {\n        console.log(`Episode added to the library [${id}]`);\n    };\n\n    const handleEpisodeRemoval = (id) => {\n        console.log(`Episode removed from the library [${id}]`);\n    };\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if(Object.keys(details).length === 0) {\n                    const episode = await Spotify.getEpisodeDetails(EPISODE_ID);\n                    const show = await Spotify.getShowDetails(episode.show.id);\n                    const moreEpisodes = selectCorrespondingEpisodes(EPISODE_ID, show.episodes.items);\n                    updateDetails({\n                        name: episode.name,\n                        description: episode.description,\n                        external: episode.external_urls.spotify,\n                        type: SEARCH_TYPES.episode,\n                        image: episode.images[1].url,\n                        showName: episode.show.name,\n                        showId: episode.show.id,\n                        releaseDate: episode.release_date,\n                        duration: episode.duration_ms\n                    });\n                    updateLibrary({\n                        inLibrary: false,\n                        addToLibraryText: 'Like',\n                        removeFromLibraryText: 'Remove',\n                        addToLibrary: () => handleEpisodeLike(EPISODE_ID),\n                        removeFromLibrary: () => handleEpisodeRemoval(EPISODE_ID)\n                    });\n                    updateEpisodes(moreEpisodes);\n                } else {\n                    const inLibrary = false;\n                    updateLibrary((prev) => {\n                        return {\n                            ...prev,\n                            inLibrary\n                        }\n                    });\n                }\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [location.pathname]);\n\n    return (\n        <Fragment>\n            <Details details={details} library={library}/>\n            <Tiles title=\"More episodes\">\n                { episodes ?\n                    episodes.map(episode => {\n                        return <Tile\n                            key={episode.id}\n                            id={episode.id}\n                            title={episode.name}\n                            description={episode.description}\n                            image={episode.images[1].url}\n                            type={SEARCH_TYPES.episode} />\n                }) : null}\n            </Tiles>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Episode);"]},"metadata":{},"sourceType":"module"}