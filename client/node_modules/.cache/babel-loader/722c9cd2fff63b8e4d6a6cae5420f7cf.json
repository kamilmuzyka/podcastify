{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst Episode = ({\n  location\n}) => {\n  const [isLoading, updateIsLoading] = useState(true);\n  const [details, updateDetails] = useState({});\n  useEffect(() => {\n    (async () => {\n      const path = location.pathname;\n      const episodeId = extractId(path);\n\n      try {\n        const results = await Spotify.getEpisodeDetails(episodeId);\n        console.log(results); // const {\n        //     name,\n        //     external_urls,\n        //     description,\n        //     images } = await Spotify.getEpisodeDetails(episodeId);\n        // updateDetails({\n        //     name,\n        //     external: external_urls.spotify,\n        //     description,\n        //     image: images[1].url,\n        //     type: SEARCH_TYPES.episode\n        // });\n\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, Object.assign({}, details, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Episode);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","Details","WorkspaceLoading","Episode","location","isLoading","updateIsLoading","details","updateDetails","path","pathname","episodeId","results","getEpisodeDetails","console","log","err","Error","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9B,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BZ,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM,CAACa,OAAD,EAAUC,aAAV,IAA2Bd,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,YAAMc,IAAI,GAAGL,QAAQ,CAACM,QAAtB;AACA,YAAMC,SAAS,GAAGX,SAAS,CAACS,IAAD,CAA3B;;AACA,UAAI;AAEA,cAAMG,OAAO,GAAG,MAAMb,OAAO,CAACc,iBAAR,CAA0BF,SAA1B,CAAtB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAHA,CAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAN,QAAAA,eAAe,CAAC,KAAD,CAAf;AACH,OApBD,CAoBE,OAAMU,GAAN,EAAW;AACT,cAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,KA1BD;AA2BH,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD,oBAAaT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,eAEI,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEF,SAAS,CAACa,QAAV,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAxCD;;AA0CA,eAAerB,UAAU,CAACM,OAAD,CAAzB","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst Episode = ({ location }) => {\n    const [isLoading, updateIsLoading] = useState(true);\n    const [details, updateDetails] = useState({});\n\n    useEffect(() => {\n        (async () => {\n            const path = location.pathname;\n            const episodeId = extractId(path);\n            try {\n\n                const results = await Spotify.getEpisodeDetails(episodeId);\n                console.log(results);\n\n                // const {\n                //     name,\n                //     external_urls,\n                //     description,\n                //     images } = await Spotify.getEpisodeDetails(episodeId);\n\n                // updateDetails({\n                //     name,\n                //     external: external_urls.spotify,\n                //     description,\n                //     image: images[1].url,\n                //     type: SEARCH_TYPES.episode\n                // });\n\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, []);\n\n    return (\n        <Fragment>\n            <Details {...details}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Episode);"]},"metadata":{},"sourceType":"module"}