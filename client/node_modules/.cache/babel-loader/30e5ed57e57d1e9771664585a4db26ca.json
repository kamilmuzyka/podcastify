{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/ShowDetails/ShowDetails.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport Details from '../../Details/Details';\nimport ShowEpisodes from './ShowEpisodes/ShowEpisodes';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst ShowDetails = ({\n  location\n}) => {\n  const [isLoading, updateIsLoading] = useState(true);\n  const [details, updateDetails] = useState({});\n  useEffect(() => {\n    (async () => {\n      const path = location.pathname;\n      const showId = path.substring(path.lastIndexOf('/') + 1);\n\n      try {\n        const {\n          name,\n          publisher,\n          external_urls,\n          description,\n          images,\n          episodes\n        } = await Spotify.getDetails(showId, SEARCH_TYPES.show);\n        updateDetails({\n          name,\n          publisher,\n          source: external_urls.spotify,\n          description,\n          image: images[1].url,\n          episodes\n        });\n        updateIsLoading(false);\n      } catch (err) {\n        console.error(err);\n      }\n    })();\n  }, [location.pathname]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, Object.assign({}, details, {\n    type: SEARCH_TYPES.show,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ShowEpisodes, {\n    episodes: details.episodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(ShowDetails);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/ShowDetails/ShowDetails.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","Details","ShowEpisodes","WorkspaceLoading","ShowDetails","location","isLoading","updateIsLoading","details","updateDetails","path","pathname","showId","substring","lastIndexOf","name","publisher","external_urls","description","images","episodes","getDetails","show","source","spotify","image","url","err","console","error","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AAEA,OAAOC,gBAAP,MAA6B,yCAA7B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAElC,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BZ,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM,CAACa,OAAD,EAAUC,aAAV,IAA2Bd,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,YAAMc,IAAI,GAAGL,QAAQ,CAACM,QAAtB;AACA,YAAMC,MAAM,GAAGF,IAAI,CAACG,SAAL,CAAeH,IAAI,CAACI,WAAL,CAAiB,GAAjB,IAAwB,CAAvC,CAAf;;AACA,UAAI;AACA,cAAM;AACFC,UAAAA,IADE;AAEFC,UAAAA,SAFE;AAGFC,UAAAA,aAHE;AAIFC,UAAAA,WAJE;AAKFC,UAAAA,MALE;AAMFC,UAAAA;AANE,YAMW,MAAMpB,OAAO,CAACqB,UAAR,CAAmBT,MAAnB,EAA2Bb,YAAY,CAACuB,IAAxC,CANvB;AAQAb,QAAAA,aAAa,CAAC;AACVM,UAAAA,IADU;AAEVC,UAAAA,SAFU;AAGVO,UAAAA,MAAM,EAAEN,aAAa,CAACO,OAHZ;AAIVN,UAAAA,WAJU;AAKVO,UAAAA,KAAK,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAUO,GALP;AAMVN,UAAAA;AANU,SAAD,CAAb;AASAb,QAAAA,eAAe,CAAC,KAAD,CAAf;AACH,OAnBD,CAmBE,OAAMoB,GAAN,EAAW;AACTC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,KAzBD;AA0BH,GA3BQ,EA2BN,CAACtB,QAAQ,CAACM,QAAV,CA3BM,CAAT;AA6BA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD,oBAAaH,OAAb;AAAsB,IAAA,IAAI,EAAET,YAAY,CAACuB,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,eAEI,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEd,OAAO,CAACY,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEd,SAAS,CAACwB,QAAV,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CAzCD;;AA2CA,eAAehC,UAAU,CAACM,WAAD,CAAzB","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport Details from '../../Details/Details';\nimport ShowEpisodes from './ShowEpisodes/ShowEpisodes';\n\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst ShowDetails = ({ location }) => {\n\n    const [isLoading, updateIsLoading] = useState(true);\n    const [details, updateDetails] = useState({});\n\n    useEffect(() => {\n        (async () => {\n            const path = location.pathname;\n            const showId = path.substring(path.lastIndexOf('/') + 1);\n            try {\n                const {\n                    name,\n                    publisher,\n                    external_urls,\n                    description,\n                    images,\n                    episodes } = await Spotify.getDetails(showId, SEARCH_TYPES.show);\n\n                updateDetails({\n                    name,\n                    publisher,\n                    source: external_urls.spotify,\n                    description,\n                    image: images[1].url,\n                    episodes\n                });\n\n                updateIsLoading(false);\n            } catch(err) {\n                console.error(err);\n            }\n        })();\n    }, [location.pathname]);\n\n    return (\n        <Fragment>\n            <Details {...details} type={SEARCH_TYPES.show} />\n            <ShowEpisodes episodes={details.episodes}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(ShowDetails);"]},"metadata":{},"sourceType":"module"}