{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({\n  location\n}) => {\n  const SHOW_ID = extractId(location.pathname);\n  const [status, updateStatus] = useState(null);\n  const [details, updateDetails] = useState({});\n  const [isLoading, updateIsLoading] = useState(true);\n\n  const handleShowFollow = id => {\n    Spotify.saveUserShow(id);\n    updateStatus(true);\n  };\n\n  const handleShowUnfollow = id => {\n    Spotify.removeUserShow(id);\n    updateStatus(false);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const inLibrary = await Spotify.checkUserShow(SHOW_ID);\n        updateDetails(prev => {\n          return { ...prev,\n            inLibrary\n          };\n        });\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [status]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const show = await Spotify.getShowDetails(SHOW_ID);\n        const inLibrary = await Spotify.checkUserShow(SHOW_ID);\n        updateDetails({\n          name: show.name,\n          showId: show.id,\n          description: show.description,\n          external: show.external_urls.spotify,\n          type: SEARCH_TYPES.show,\n          publisher: show.publisher,\n          image: show.images[1].url,\n          episodes: show.episodes,\n          inLibrary,\n          addToLibraryText: 'Follow',\n          removeFromLibraryText: 'Unfollow',\n          addToLibrary: () => handleShowFollow(SHOW_ID),\n          removeFromLibrary: () => handleShowUnfollow(SHOW_ID)\n        });\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [SHOW_ID]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    details: details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EpisodesList, {\n    episodes: details.episodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Show);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","WorkspaceLoading","Details","EpisodesList","Show","location","SHOW_ID","pathname","status","updateStatus","details","updateDetails","isLoading","updateIsLoading","handleShowFollow","id","saveUserShow","handleShowUnfollow","removeUserShow","inLibrary","checkUserShow","prev","err","Error","show","getShowDetails","name","showId","description","external","external_urls","spotify","type","publisher","image","images","url","episodes","addToLibraryText","removeFromLibraryText","addToLibrary","removeFromLibrary","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({ location }) => {\n    const SHOW_ID = extractId(location.pathname);\n    const [status, updateStatus] = useState(null);\n    const [details, updateDetails] = useState({});\n    const [isLoading, updateIsLoading] = useState(true);\n\n    const handleShowFollow = (id) => {\n        Spotify.saveUserShow(id);\n        updateStatus(true);\n    };\n\n    const handleShowUnfollow = (id) => {\n        Spotify.removeUserShow(id);\n        updateStatus(false);\n    };\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const inLibrary = await Spotify.checkUserShow(SHOW_ID);\n                updateDetails((prev) => {\n                    return {\n                        ...prev,\n                        inLibrary\n                    };\n                });\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [status]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const show = await Spotify.getShowDetails(SHOW_ID);\n                const inLibrary = await Spotify.checkUserShow(SHOW_ID);\n                updateDetails({\n                    name: show.name,\n                    showId: show.id,\n                    description: show.description,\n                    external: show.external_urls.spotify,\n                    type: SEARCH_TYPES.show,\n                    publisher: show.publisher,\n                    image: show.images[1].url,\n                    episodes: show.episodes,\n                    inLibrary,\n                    addToLibraryText: 'Follow',\n                    removeFromLibraryText: 'Unfollow',\n                    addToLibrary: () => handleShowFollow(SHOW_ID),\n                    removeFromLibrary: () => handleShowUnfollow(SHOW_ID)\n                });\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [SHOW_ID]);\n\n    return (\n        <Fragment>\n            <Details details={details}/>\n            <EpisodesList episodes={details.episodes}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Show);"]},"metadata":{},"sourceType":"module"}