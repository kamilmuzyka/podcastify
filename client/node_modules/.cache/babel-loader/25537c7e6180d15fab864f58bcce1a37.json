{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { QueueContext } from '../../../contexts/QueueContextProvider';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\nconst Progress = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\nconst Bar = styled.div`\n    width: ${({\n  percentage\n}) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\nconst Controls = styled.div`\n    display: flex;\n    align-items: center;\n    @media (min-width: 500px) {\n        order: 2;\n        flex: 1;\n        justify-content: center;\n    }\n    @media (min-width: 1380px) {\n        position: absolute;\n        top: 1.25em;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`;\nconst MiddleButton = styled.div`\n    display: inline-block;\n    margin: 0 1em;\n`;\nconst Episode = styled.div`\n    font-size: ${({\n  theme\n}) => theme.typography.small};\n    color: ${({\n  theme\n}) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        background-color: transparent;\n    }\n`;\nconst Placeholder = styled.div`\n    width: 50px;\n    height: 50px;\n    background-size: cover;\n`;\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = props => {\n  const [progressPercentage, updateProgressPercentage] = useState(0);\n  const {\n    currentEpisode,\n    loadQueueNext\n  } = useContext(QueueContext);\n  const {\n    audio,\n    resetPlayer\n  } = useContext(PlayerContext);\n\n  const refreshProgressBar = () => {\n    const currentTime = audio.currentTime;\n    const duration = audio.duration;\n    const progress = Math.round(currentTime / duration * 100);\n    updateProgressPercentage(progress);\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(refreshProgressBar, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  useEffect(() => {\n    if (progressPercentage === 100) {\n      loadQueueNext();\n    }\n  }, [progressPercentage]);\n  useEffect(() => {\n    resetPlayer();\n  }, [currentEpisode]);\n  return /*#__PURE__*/React.createElement(Element, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Progress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    percentage: progressPercentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Episode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, currentEpisode ? /*#__PURE__*/React.createElement(InternalLink, {\n    to: `/episodes/${currentEpisode.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Thumbnail, {\n    src: currentEpisode.images[0].url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Name, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 29\n    }\n  }, currentEpisode.name)) : /*#__PURE__*/React.createElement(Placeholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default Player;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js"],"names":["React","useState","useContext","useEffect","styled","Link","QueueContext","PlayerContext","Element","div","theme","colors","tertiary","Progress","Bar","percentage","specific","Content","Controls","MiddleButton","Episode","typography","small","InternalLink","Thumbnail","img","Placeholder","Name","p","Player","props","progressPercentage","updateProgressPercentage","currentEpisode","loadQueueNext","audio","resetPlayer","refreshProgressBar","currentTime","duration","progress","Math","round","intervalId","setInterval","clearInterval","id","images","url","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { QueueContext } from '../../../contexts/QueueContextProvider';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\n\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\n\nconst Progress = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\n\nconst Bar = styled.div`\n    width: ${({ percentage }) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\n\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\n\nconst Controls = styled.div`\n    display: flex;\n    align-items: center;\n    @media (min-width: 500px) {\n        order: 2;\n        flex: 1;\n        justify-content: center;\n    }\n    @media (min-width: 1380px) {\n        position: absolute;\n        top: 1.25em;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`;\n\nconst MiddleButton = styled.div`\n    display: inline-block;\n    margin: 0 1em;\n`;\n\nconst Episode = styled.div`\n    font-size: ${({ theme }) => theme.typography.small};\n    color: ${({ theme }) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\n\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\n\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        background-color: transparent;\n    }\n`;\n\nconst Placeholder = styled.div`\n    width: 50px;\n    height: 50px;\n    background-size: cover;\n`;\n\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = (props) => {\n    const [progressPercentage, updateProgressPercentage] = useState(0);\n    const { currentEpisode, loadQueueNext } = useContext(QueueContext);\n    const { audio, resetPlayer } = useContext(PlayerContext);\n\n    const refreshProgressBar = () => {\n        const currentTime = audio.currentTime;\n        const duration = audio.duration;\n        const progress = Math.round(currentTime / duration * 100);\n        updateProgressPercentage(progress);\n    }\n\n    useEffect(() => {\n        const intervalId = setInterval(refreshProgressBar, 300);\n        return () => {\n            clearInterval(intervalId);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (progressPercentage === 100) {\n            loadQueueNext();\n        }\n    }, [progressPercentage]);\n\n    useEffect(() => {\n        resetPlayer();\n    }, [currentEpisode]);\n\n    return (\n        <Element>\n            <Progress>\n                <Bar percentage={progressPercentage}/>\n            </Progress>\n            <Content>\n                <Controls/>\n                <Episode>\n                    { currentEpisode ?\n                        <InternalLink to={`/episodes/${currentEpisode.id}`}>\n                            <Thumbnail src={currentEpisode.images[0].url}/>\n                            <Name>\n                                {currentEpisode.name}\n                            </Name>\n                        </InternalLink>\n                        :\n                        <Placeholder/>\n                    }\n                </Episode>\n            </Content>\n        </Element>\n    );\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}