{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\n\nconst Episode = ({\n  location\n}) => {\n  // const [isLoading, updateIsLoading] = useState(true);\n  const [details, updateDetails] = useState({});\n  useEffect(() => {\n    (async () => {\n      const path = location.pathname;\n      const episodeId = extractId(path);\n\n      try {\n        const {\n          name,\n          external_urls,\n          description,\n          images\n        } = await Spotify.getEpisodeDetails(episodeId);\n        console.log(name, external_urls, description, images);\n        updateDetails({\n          name,\n          external: external_urls.spotify,\n          description,\n          image: images[1].url,\n          type: SEARCH_TYPES.episode\n        });\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, Object.assign({}, details, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default withRouter(Episode);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","Details","Episode","location","details","updateDetails","path","pathname","episodeId","name","external_urls","description","images","getEpisodeDetails","console","log","external","spotify","image","url","type","episode","err","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9B;AACA,QAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BX,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,YAAMW,IAAI,GAAGH,QAAQ,CAACI,QAAtB;AACA,YAAMC,SAAS,GAAGR,SAAS,CAACM,IAAD,CAA3B;;AACA,UAAI;AACA,cAAM;AACFG,UAAAA,IADE;AAEFC,UAAAA,aAFE;AAGFC,UAAAA,WAHE;AAIFC,UAAAA;AAJE,YAIS,MAAMb,OAAO,CAACc,iBAAR,CAA0BL,SAA1B,CAJrB;AAKIM,QAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ,EAAkBC,aAAlB,EAAiCC,WAAjC,EAA8CC,MAA9C;AACJP,QAAAA,aAAa,CAAC;AACVI,UAAAA,IADU;AAEVO,UAAAA,QAAQ,EAAEN,aAAa,CAACO,OAFd;AAGVN,UAAAA,WAHU;AAIVO,UAAAA,KAAK,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAUO,GAJP;AAKVC,UAAAA,IAAI,EAAEtB,YAAY,CAACuB;AALT,SAAD,CAAb;AAOH,OAdD,CAcE,OAAMC,GAAN,EAAW;AACT,cAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,KApBD;AAqBH,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD,oBAAalB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CADJ;AAKH,CAjCD;;AAmCA,eAAeP,UAAU,CAACK,OAAD,CAAzB","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\n\nconst Episode = ({ location }) => {\n    // const [isLoading, updateIsLoading] = useState(true);\n    const [details, updateDetails] = useState({});\n\n    useEffect(() => {\n        (async () => {\n            const path = location.pathname;\n            const episodeId = extractId(path);\n            try {\n                const {\n                    name,\n                    external_urls,\n                    description,\n                    images } = await Spotify.getEpisodeDetails(episodeId);\n                    console.log(name, external_urls, description, images);\n                updateDetails({\n                    name,\n                    external: external_urls.spotify,\n                    description,\n                    image: images[1].url,\n                    type: SEARCH_TYPES.episode\n                });\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, []);\n\n    return (\n        <Fragment>\n            <Details {...details}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Episode);"]},"metadata":{},"sourceType":"module"}