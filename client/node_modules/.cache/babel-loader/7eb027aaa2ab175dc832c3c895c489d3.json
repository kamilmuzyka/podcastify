{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/client/src/components/Workspace/Player/Progress/Progress.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport { PlayerContext } from '../../../../contexts/PlayerContextProvider';\nconst Element = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\nconst Bar = styled.div`\n    width: ${({\n  percentage\n}) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\n\nconst Progress = ({\n  audio\n}) => {\n  const [progressPercentage, updateProgressPercentage] = useState(0);\n  const {\n    playNext\n  } = useContext(PlayerContext);\n\n  const refreshProgressBar = () => {\n    if (audio) {\n      const currentTime = audio.currentTime;\n      const duration = audio.duration;\n      const progress = Math.round(currentTime / duration * 100);\n      updateProgressPercentage(progress);\n    }\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(refreshProgressBar, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [audio]);\n  useEffect(() => {\n    if (progressPercentage === 100) {\n      playNext();\n    }\n  }, [progressPercentage]);\n  return /*#__PURE__*/React.createElement(Element, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    percentage: progressPercentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Progress;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/client/src/components/Workspace/Player/Progress/Progress.js"],"names":["React","useState","useEffect","useContext","styled","PlayerContext","Element","div","Bar","percentage","theme","colors","specific","Progress","audio","progressPercentage","updateProgressPercentage","playNext","refreshProgressBar","currentTime","duration","progress","Math","round","intervalId","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,aAAT,QAA8B,4CAA9B;AAEA,MAAMC,OAAO,GAAGF,MAAM,CAACG,GAAI;;;;;;;;;;;;CAA3B;AAcA,MAAMC,GAAG,GAAGJ,MAAM,CAACG,GAAI;aACV,CAAC;AAAEE,EAAAA;AAAF,CAAD,KAAoBA,UAAU,GAAGA,UAAH,GAAgB,CAAE;;wBAErC,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaC,QAAS;;;;;;CAH7D;;AAWA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC5B,QAAM,CAACC,kBAAD,EAAqBC,wBAArB,IAAiDf,QAAQ,CAAC,CAAD,CAA/D;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAed,UAAU,CAACE,aAAD,CAA/B;;AAEA,QAAMa,kBAAkB,GAAG,MAAM;AAC7B,QAAIJ,KAAJ,EAAW;AACP,YAAMK,WAAW,GAAGL,KAAK,CAACK,WAA1B;AACA,YAAMC,QAAQ,GAAGN,KAAK,CAACM,QAAvB;AACA,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWJ,WAAW,GAAGC,QAAd,GAAyB,GAApC,CAAjB;AACAJ,MAAAA,wBAAwB,CAACK,QAAD,CAAxB;AACH;AACJ,GAPD;;AASAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMsB,UAAU,GAAGC,WAAW,CAACP,kBAAD,EAAqB,GAArB,CAA9B;AACA,WAAO,MAAM;AACTQ,MAAAA,aAAa,CAACF,UAAD,CAAb;AACH,KAFD;AAGH,GALQ,EAKN,CAACV,KAAD,CALM,CAAT;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIa,kBAAkB,KAAK,GAA3B,EAAgC;AAC5BE,MAAAA,QAAQ;AACX;AACJ,GAJQ,EAIN,CAACF,kBAAD,CAJM,CAAT;AAMA,sBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,UAAU,EAAEA,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CA/BD;;AAiCA,eAAeF,QAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport { PlayerContext } from '../../../../contexts/PlayerContextProvider';\n\nconst Element = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\n\nconst Bar = styled.div`\n    width: ${({ percentage }) => percentage ? percentage : 0}%;\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\n\nconst Progress = ({ audio }) => {\n    const [progressPercentage, updateProgressPercentage] = useState(0);\n    const { playNext } = useContext(PlayerContext);\n\n    const refreshProgressBar = () => {\n        if (audio) {\n            const currentTime = audio.currentTime;\n            const duration = audio.duration;\n            const progress = Math.round(currentTime / duration * 100);\n            updateProgressPercentage(progress);\n        }\n    }\n\n    useEffect(() => {\n        const intervalId = setInterval(refreshProgressBar, 300);\n        return () => {\n            clearInterval(intervalId);\n        }\n    }, [audio]);\n\n    useEffect(() => {\n        if (progressPercentage === 100) {\n            playNext();\n        }\n    }, [progressPercentage]);\n\n    return (\n        <Element>\n            <Bar percentage={progressPercentage}/>\n        </Element>\n    );\n}\n\nexport default Progress;"]},"metadata":{},"sourceType":"module"}