{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport Tiles from '../../Tiles/Tiles';\nimport Tile from '../../Tiles/Tile/Tile';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst selectCorrespondingEpisodes = (currentEpisodeId, episodes) => {\n  let episodesRangeBeginningIndex = 0;\n  const episodesToDisplay = 4;\n  const currentEpisodeIndex = episodes.findIndex(episode => episode.id === currentEpisodeId);\n\n  if (currentEpisodeIndex !== -1 && currentEpisodeIndex >= episodesToDisplay) {\n    episodesRangeBeginningIndex = currentEpisodeIndex;\n  }\n\n  return episodes.splice(episodesRangeBeginningIndex - episodesToDisplay, episodesToDisplay).reverse();\n};\n\nconst Episode = ({\n  location\n}) => {\n  const EPISODE_ID = extractId(location.pathname);\n  const [isLoading, updateIsLoading] = useState(true);\n  const [details, updateDetails] = useState({});\n  const [episodes, updateEpisodes] = useState([]);\n\n  const handleEpisodeLike = id => {\n    console.log(`Episode added to the library [${id}]`);\n  };\n\n  const handleEpisodeRemoval = id => {\n    console.log(`Episode removed from the library [${id}]`);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const episode = await Spotify.getEpisodeDetails(EPISODE_ID);\n        updateDetails({\n          name: episode.name,\n          description: episode.description,\n          external: episode.external_urls.spotify,\n          type: SEARCH_TYPES.episode,\n          image: episode.images[1].url,\n          showName: episode.show.name,\n          showId: episode.show.id,\n          releaseDate: episode.release_date,\n          duration: episode.duration_ms,\n          inLibrary: true,\n          addToLibraryText: 'Like',\n          removeFromLibraryText: 'Remove',\n          addToLibrary: () => handleEpisodeLike(EPISODE_ID),\n          removeFromLibrary: () => handleEpisodeRemoval(EPISODE_ID)\n        });\n        const show = await Spotify.getShowDetails(episode.show.id);\n        const moreEpisodes = selectCorrespondingEpisodes(EPISODE_ID, show.episodes.items);\n        updateEpisodes(moreEpisodes);\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [EPISODE_ID]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    details: details,\n    library: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tiles, {\n    title: \"More episodes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, episodes ? episodes.map(episode => {\n    return /*#__PURE__*/React.createElement(Tile, {\n      key: episode.id,\n      id: episode.id,\n      title: episode.name,\n      description: episode.description,\n      image: episode.images[1].url,\n      type: SEARCH_TYPES.episode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 32\n      }\n    });\n  }) : null), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Episode);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","Details","Tiles","Tile","WorkspaceLoading","selectCorrespondingEpisodes","currentEpisodeId","episodes","episodesRangeBeginningIndex","episodesToDisplay","currentEpisodeIndex","findIndex","episode","id","splice","reverse","Episode","location","EPISODE_ID","pathname","isLoading","updateIsLoading","details","updateDetails","updateEpisodes","handleEpisodeLike","console","log","handleEpisodeRemoval","getEpisodeDetails","name","description","external","external_urls","spotify","type","image","images","url","showName","show","showId","releaseDate","release_date","duration","duration_ms","inLibrary","addToLibraryText","removeFromLibraryText","addToLibrary","removeFromLibrary","getShowDetails","moreEpisodes","items","err","Error","map","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport Tiles from '../../Tiles/Tiles';\nimport Tile from '../../Tiles/Tile/Tile';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst selectCorrespondingEpisodes = (currentEpisodeId, episodes) => {\n    let episodesRangeBeginningIndex = 0;\n    const episodesToDisplay = 4;\n    const currentEpisodeIndex = episodes\n        .findIndex(episode => episode.id === currentEpisodeId);\n    if (currentEpisodeIndex !== -1 && currentEpisodeIndex >= episodesToDisplay) {\n        episodesRangeBeginningIndex = currentEpisodeIndex;\n    }\n    return episodes\n        .splice(episodesRangeBeginningIndex - episodesToDisplay, episodesToDisplay)\n        .reverse();\n}\n\nconst Episode = ({ location }) => {\n    const EPISODE_ID = extractId(location.pathname);\n    const [isLoading, updateIsLoading] = useState(true);\n    const [details, updateDetails] = useState({});\n    const [episodes, updateEpisodes] = useState([]);\n\n    const handleEpisodeLike = (id) => {\n        console.log(`Episode added to the library [${id}]`);\n    };\n\n    const handleEpisodeRemoval = (id) => {\n        console.log(`Episode removed from the library [${id}]`);\n    };\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const episode = await Spotify.getEpisodeDetails(EPISODE_ID);\n                updateDetails({\n                    name: episode.name,\n                    description: episode.description,\n                    external: episode.external_urls.spotify,\n                    type: SEARCH_TYPES.episode,\n                    image: episode.images[1].url,\n                    showName: episode.show.name,\n                    showId: episode.show.id,\n                    releaseDate: episode.release_date,\n                    duration: episode.duration_ms,\n                    inLibrary: true,\n                    addToLibraryText: 'Like',\n                    removeFromLibraryText: 'Remove',\n                    addToLibrary: () => handleEpisodeLike(EPISODE_ID),\n                    removeFromLibrary: () => handleEpisodeRemoval(EPISODE_ID)\n                });\n                const show = await Spotify.getShowDetails(episode.show.id);\n                const moreEpisodes = selectCorrespondingEpisodes(EPISODE_ID, show.episodes.items);\n                updateEpisodes(moreEpisodes);\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [EPISODE_ID]);\n\n    return (\n        <Fragment>\n            <Details details={details} library={{}}/>\n            <Tiles title=\"More episodes\">\n                { episodes ?\n                    episodes.map(episode => {\n                        return <Tile\n                            key={episode.id}\n                            id={episode.id}\n                            title={episode.name}\n                            description={episode.description}\n                            image={episode.images[1].url}\n                            type={SEARCH_TYPES.episode} />\n                }) : null}\n            </Tiles>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Episode);"]},"metadata":{},"sourceType":"module"}