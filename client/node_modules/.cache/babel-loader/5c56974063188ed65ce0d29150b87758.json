{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/contexts/PlayerContextProvider.js\";\nimport React, { createContext, useState, useContext } from 'react';\nimport { QueueContext } from './QueueContextProvider';\nexport const PlayerContext = createContext();\n\nconst PlayerContextProvider = props => {\n  const [isPlaying, updateIsPlaying] = useState(false);\n  const [audio, updateAudio] = useState();\n  const {\n    currentEpisode,\n    loadQueueNext,\n    loadQueuePrevious\n  } = useContext(QueueContext);\n\n  const startPlaying = () => {\n    if (audio && currentEpisode) {\n      audio.play();\n      updateIsPlaying(true);\n    }\n  };\n\n  const stopPlaying = () => {\n    if (audio && currentEpisode) {\n      console.log('2');\n      audio.pause();\n      updateIsPlaying(false);\n    }\n  };\n\n  const resetPlayer = () => {\n    if (audio && currentEpisode) {\n      stopPlaying();\n      audio.currentTime = 0;\n      startPlaying();\n    }\n  };\n\n  const playNext = () => {\n    loadQueueNext();\n  };\n\n  const playPrevious = () => {\n    loadQueuePrevious();\n  };\n\n  return /*#__PURE__*/React.createElement(PlayerContext.Provider, {\n    value: {\n      isPlaying,\n      updateAudio,\n      startPlaying,\n      stopPlaying,\n      playNext,\n      playPrevious,\n      resetPlayer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default PlayerContextProvider;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/contexts/PlayerContextProvider.js"],"names":["React","createContext","useState","useContext","QueueContext","PlayerContext","PlayerContextProvider","props","isPlaying","updateIsPlaying","audio","updateAudio","currentEpisode","loadQueueNext","loadQueuePrevious","startPlaying","play","stopPlaying","console","log","pause","resetPlayer","currentTime","playNext","playPrevious","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,OAAO,MAAMC,aAAa,GAAGJ,aAAa,EAAnC;;AAEP,MAAMK,qBAAqB,GAAIC,KAAD,IAAW;AACrC,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BP,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACQ,KAAD,EAAQC,WAAR,IAAuBT,QAAQ,EAArC;AACA,QAAM;AAAEU,IAAAA,cAAF;AAAkBC,IAAAA,aAAlB;AAAiCC,IAAAA;AAAjC,MAAuDX,UAAU,CAACC,YAAD,CAAvE;;AAEA,QAAMW,YAAY,GAAG,MAAM;AACvB,QAAIL,KAAK,IAAIE,cAAb,EAA6B;AACzBF,MAAAA,KAAK,CAACM,IAAN;AACAP,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH;AACJ,GALD;;AAOA,QAAMQ,WAAW,GAAG,MAAM;AACtB,QAAIP,KAAK,IAAIE,cAAb,EAA6B;AACzBM,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAT,MAAAA,KAAK,CAACU,KAAN;AACAX,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH;AACJ,GAND;;AAQA,QAAMY,WAAW,GAAG,MAAM;AACtB,QAAIX,KAAK,IAAIE,cAAb,EAA6B;AACzBK,MAAAA,WAAW;AACXP,MAAAA,KAAK,CAACY,WAAN,GAAoB,CAApB;AACAP,MAAAA,YAAY;AACf;AACJ,GAND;;AAQA,QAAMQ,QAAQ,GAAG,MAAM;AACnBV,IAAAA,aAAa;AAChB,GAFD;;AAIA,QAAMW,YAAY,GAAG,MAAM;AACvBV,IAAAA,iBAAiB;AACpB,GAFD;;AAIA,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BN,MAAAA,SAD2B;AAE3BG,MAAAA,WAF2B;AAG3BI,MAAAA,YAH2B;AAI3BE,MAAAA,WAJ2B;AAK3BM,MAAAA,QAL2B;AAM3BC,MAAAA,YAN2B;AAO3BH,MAAAA;AAP2B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKd,KAAK,CAACkB,QATX,CADJ;AAaH,CAjDD;;AAmDA,eAAenB,qBAAf","sourcesContent":["import React, { createContext, useState, useContext } from 'react';\nimport { QueueContext } from './QueueContextProvider';\n\nexport const PlayerContext = createContext();\n\nconst PlayerContextProvider = (props) => {\n    const [isPlaying, updateIsPlaying] = useState(false);\n    const [audio, updateAudio] = useState();\n    const { currentEpisode, loadQueueNext, loadQueuePrevious } = useContext(QueueContext);\n\n    const startPlaying = () => {\n        if (audio && currentEpisode) {\n            audio.play();\n            updateIsPlaying(true);\n        }\n    }\n\n    const stopPlaying = () => {\n        if (audio && currentEpisode) {\n            console.log('2');\n            audio.pause();\n            updateIsPlaying(false);\n        }\n    }\n\n    const resetPlayer = () => {\n        if (audio && currentEpisode) {\n            stopPlaying();\n            audio.currentTime = 0;\n            startPlaying();\n        }\n    }\n\n    const playNext = () => {\n        loadQueueNext();\n    }\n\n    const playPrevious = () => {\n        loadQueuePrevious();\n    }\n\n    return (\n        <PlayerContext.Provider value={{\n            isPlaying,\n            updateAudio,\n            startPlaying,\n            stopPlaying,\n            playNext,\n            playPrevious,\n            resetPlayer\n        }}>\n            {props.children}\n        </PlayerContext.Provider>\n    );\n}\n\nexport default PlayerContextProvider;"]},"metadata":{},"sourceType":"module"}