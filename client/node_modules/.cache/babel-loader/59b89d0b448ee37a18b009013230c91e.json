{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport Tiles from '../../Tiles/Tiles';\nimport Tile from '../../Tiles/Tile/Tile';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst Episode = ({\n  location\n}) => {\n  const EPISODE_ID = extractId(location.pathname);\n  const [details, updateDetails] = useState({});\n  const [library, updateLibrary] = useState({});\n  const [episodes, updateEpisodes] = useState([]);\n  const [isLoading, updateIsLoading] = useState(true);\n\n  const handleEpisodeLike = id => {\n    console.log(`Episode added to the library [${id}]`);\n  };\n\n  const handleEpisodeRemoval = id => {\n    console.log(`Episode removed from the library [${id}]`);\n  };\n\n  const selectCorrespondingEpisodes = (currentEpisodeId, episodes) => {\n    let episodesRangeBeginningIndex = 0;\n    const episodesToDisplay = 4;\n    const currentEpisodeIndex = episodes.findIndex(episode => episode.id === currentEpisodeId);\n\n    if (currentEpisodeIndex !== -1 && currentEpisodeIndex < episodes.length) {\n      episodesRangeBeginningIndex = currentEpisodeIndex;\n    }\n\n    return [...episodes].splice(episodesRangeBeginningIndex + 1, episodesToDisplay);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const episode = await Spotify.getEpisodeDetails(EPISODE_ID);\n        const show = await Spotify.getShowDetails(episode.show.id);\n        const moreEpisodes = selectCorrespondingEpisodes(EPISODE_ID, show.episodes.items);\n        updateDetails({\n          id: EPISODE_ID,\n          name: episode.name,\n          description: episode.description,\n          external: episode.external_urls.spotify,\n          type: SEARCH_TYPES.episode,\n          image: episode.images[1].url,\n          showName: episode.show.name,\n          showId: episode.show.id,\n          releaseDate: episode.release_date,\n          duration: episode.duration_ms,\n          episodes: show.episodes.items\n        });\n        updateLibrary({\n          inLibrary: false,\n          addToLibraryText: 'Like',\n          removeFromLibraryText: 'Remove',\n          addToLibrary: () => handleEpisodeLike(EPISODE_ID),\n          removeFromLibrary: () => handleEpisodeRemoval(EPISODE_ID)\n        });\n        updateEpisodes(moreEpisodes);\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [EPISODE_ID]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    details: details,\n    library: library,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tiles, {\n    title: \"More episodes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, episodes ? episodes.map(episode => {\n    return /*#__PURE__*/React.createElement(Tile, {\n      key: episode.id,\n      id: episode.id,\n      title: episode.name,\n      description: episode.description,\n      image: episode.images[1].url,\n      type: SEARCH_TYPES.episode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 32\n      }\n    });\n  }) : null), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Episode);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","Details","Tiles","Tile","WorkspaceLoading","Episode","location","EPISODE_ID","pathname","details","updateDetails","library","updateLibrary","episodes","updateEpisodes","isLoading","updateIsLoading","handleEpisodeLike","id","console","log","handleEpisodeRemoval","selectCorrespondingEpisodes","currentEpisodeId","episodesRangeBeginningIndex","episodesToDisplay","currentEpisodeIndex","findIndex","episode","length","splice","getEpisodeDetails","show","getShowDetails","moreEpisodes","items","name","description","external","external_urls","spotify","type","image","images","url","showName","showId","releaseDate","release_date","duration","duration_ms","inLibrary","addToLibraryText","removeFromLibraryText","addToLibrary","removeFromLibrary","err","Error","map","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport Tiles from '../../Tiles/Tiles';\nimport Tile from '../../Tiles/Tile/Tile';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst Episode = ({ location }) => {\n    const EPISODE_ID = extractId(location.pathname);\n    const [details, updateDetails] = useState({});\n    const [library, updateLibrary] = useState({});\n    const [episodes, updateEpisodes] = useState([]);\n    const [isLoading, updateIsLoading] = useState(true);\n\n    const handleEpisodeLike = (id) => {\n        console.log(`Episode added to the library [${id}]`);\n    };\n\n    const handleEpisodeRemoval = (id) => {\n        console.log(`Episode removed from the library [${id}]`);\n    };\n\n    const selectCorrespondingEpisodes = (currentEpisodeId, episodes) => {\n        let episodesRangeBeginningIndex = 0;\n        const episodesToDisplay = 4;\n        const currentEpisodeIndex = episodes\n            .findIndex(episode => episode.id === currentEpisodeId);\n\n        if (currentEpisodeIndex !== -1 && currentEpisodeIndex < episodes.length) {\n            episodesRangeBeginningIndex = currentEpisodeIndex;\n        }\n\n        return [...episodes]\n            .splice(episodesRangeBeginningIndex + 1, episodesToDisplay);\n    }\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const episode = await Spotify.getEpisodeDetails(EPISODE_ID);\n                const show = await Spotify.getShowDetails(episode.show.id);\n                const moreEpisodes = selectCorrespondingEpisodes(EPISODE_ID, show.episodes.items);\n                updateDetails({\n                    id: EPISODE_ID,\n                    name: episode.name,\n                    description: episode.description,\n                    external: episode.external_urls.spotify,\n                    type: SEARCH_TYPES.episode,\n                    image: episode.images[1].url,\n                    showName: episode.show.name,\n                    showId: episode.show.id,\n                    releaseDate: episode.release_date,\n                    duration: episode.duration_ms,\n                    episodes: show.episodes.items\n                });\n                updateLibrary({\n                    inLibrary: false,\n                    addToLibraryText: 'Like',\n                    removeFromLibraryText: 'Remove',\n                    addToLibrary: () => handleEpisodeLike(EPISODE_ID),\n                    removeFromLibrary: () => handleEpisodeRemoval(EPISODE_ID)\n                });\n                updateEpisodes(moreEpisodes);\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [EPISODE_ID]);\n\n    return (\n        <Fragment>\n            <Details details={details} library={library}/>\n            <Tiles title=\"More episodes\">\n                { episodes ?\n                    episodes.map(episode => {\n                        return <Tile\n                            key={episode.id}\n                            id={episode.id}\n                            title={episode.name}\n                            description={episode.description}\n                            image={episode.images[1].url}\n                            type={SEARCH_TYPES.episode} />\n                }) : null}\n            </Tiles>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Episode);"]},"metadata":{},"sourceType":"module"}