{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/contexts/PlayerContextProvider.js\";\nimport React, { createContext, useState } from 'react';\nexport const PlayerContext = createContext();\n\nconst PlayerContextProvider = props => {\n  const [isPlaying, updateIsPlaying] = useState(false);\n\n  const startPlaying = audio => {\n    if (audio) {\n      audio.play();\n      updateIsPlaying(true);\n    }\n  };\n\n  const stopPlaying = audio => {\n    if (audio) {\n      audio.pause();\n      updateIsPlaying(false);\n    }\n  };\n\n  const resetPlayer = audio => {\n    if (audio) {\n      stopPlaying();\n      audio.currentTime = 0;\n      startPlaying();\n    }\n  }; // const playNext = () => {\n  //     loadQueueNext();\n  // }\n  // const playPrevious = () => {\n  //     loadQueuePrevious();\n  // }\n\n\n  return /*#__PURE__*/React.createElement(PlayerContext.Provider, {\n    value: {\n      isPlaying,\n      startPlaying,\n      stopPlaying,\n      resetPlayer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default PlayerContextProvider;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/contexts/PlayerContextProvider.js"],"names":["React","createContext","useState","PlayerContext","PlayerContextProvider","props","isPlaying","updateIsPlaying","startPlaying","audio","play","stopPlaying","pause","resetPlayer","currentTime","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,aAAa,GAAGF,aAAa,EAAnC;;AAEP,MAAMG,qBAAqB,GAAIC,KAAD,IAAW;AACrC,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BL,QAAQ,CAAC,KAAD,CAA7C;;AAEA,QAAMM,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAIA,KAAJ,EAAW;AACPA,MAAAA,KAAK,CAACC,IAAN;AACAH,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH;AACJ,GALD;;AAOA,QAAMI,WAAW,GAAIF,KAAD,IAAW;AAC3B,QAAIA,KAAJ,EAAW;AACPA,MAAAA,KAAK,CAACG,KAAN;AACAL,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH;AACJ,GALD;;AAOA,QAAMM,WAAW,GAAIJ,KAAD,IAAW;AAC3B,QAAIA,KAAJ,EAAW;AACPE,MAAAA,WAAW;AACXF,MAAAA,KAAK,CAACK,WAAN,GAAoB,CAApB;AACAN,MAAAA,YAAY;AACf;AACJ,GAND,CAjBqC,CAyBrC;AACA;AACA;AAEA;AACA;AACA;;;AAEA,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BF,MAAAA,SAD2B;AAE3BE,MAAAA,YAF2B;AAG3BG,MAAAA,WAH2B;AAI3BE,MAAAA;AAJ2B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKR,KAAK,CAACU,QANX,CADJ;AAUH,CA3CD;;AA6CA,eAAeX,qBAAf","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const PlayerContext = createContext();\n\nconst PlayerContextProvider = (props) => {\n    const [isPlaying, updateIsPlaying] = useState(false);\n\n    const startPlaying = (audio) => {\n        if (audio) {\n            audio.play();\n            updateIsPlaying(true);\n        }\n    }\n\n    const stopPlaying = (audio) => {\n        if (audio) {\n            audio.pause();\n            updateIsPlaying(false);\n        }\n    }\n\n    const resetPlayer = (audio) => {\n        if (audio) {\n            stopPlaying();\n            audio.currentTime = 0;\n            startPlaying();\n        }\n    }\n\n    // const playNext = () => {\n    //     loadQueueNext();\n    // }\n\n    // const playPrevious = () => {\n    //     loadQueuePrevious();\n    // }\n\n    return (\n        <PlayerContext.Provider value={{\n            isPlaying,\n            startPlaying,\n            stopPlaying,\n            resetPlayer\n        }}>\n            {props.children}\n        </PlayerContext.Provider>\n    );\n}\n\nexport default PlayerContextProvider;"]},"metadata":{},"sourceType":"module"}