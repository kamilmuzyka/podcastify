{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({\n  location\n}) => {\n  const [isLoading, updateIsLoading] = useState(true);\n  const [isFollowed, updateIsFollowed] = useState();\n  const [details, updateDetails] = useState({});\n  useEffect(() => {\n    (async () => {\n      updateIsFollowed(await Spotify.checkUserShow(showId));\n    })();\n  }, [isFollowed]);\n  useEffect(() => {\n    (async () => {\n      const path = location.pathname;\n      const showId = extractId(path);\n\n      try {\n        const show = await Spotify.getShowDetails(showId);\n\n        const follow = () => Spotify.saveUserShow(showId);\n\n        const unfollow = () => Spotify.removeUserShow(showId);\n\n        updateDetails({\n          name: show.name,\n          showId: show.id,\n          description: show.description,\n          external: show.external_urls.spotify,\n          type: SEARCH_TYPES.show,\n          publisher: show.publisher,\n          image: show.images[1].url,\n          episodes: show.episodes,\n          follow,\n          unfollow\n        });\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [location.pathname]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    payload: details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EpisodesList, {\n    episodes: details.episodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Show);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","WorkspaceLoading","Details","EpisodesList","Show","location","isLoading","updateIsLoading","isFollowed","updateIsFollowed","details","updateDetails","checkUserShow","showId","path","pathname","show","getShowDetails","follow","saveUserShow","unfollow","removeUserShow","name","id","description","external","external_urls","spotify","type","publisher","image","images","url","episodes","err","Error","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+Bb,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM,CAACc,UAAD,EAAaC,gBAAb,IAAiCf,QAAQ,EAA/C;AACA,QAAM,CAACgB,OAAD,EAAUC,aAAV,IAA2BjB,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACTc,MAAAA,gBAAgB,CAAC,MAAMV,OAAO,CAACa,aAAR,CAAsBC,MAAtB,CAAP,CAAhB;AACH,KAFD;AAGH,GAJQ,EAIN,CAACL,UAAD,CAJM,CAAT;AAMAb,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,YAAMmB,IAAI,GAAGT,QAAQ,CAACU,QAAtB;AACA,YAAMF,MAAM,GAAGb,SAAS,CAACc,IAAD,CAAxB;;AACA,UAAI;AACA,cAAME,IAAI,GAAG,MAAMjB,OAAO,CAACkB,cAAR,CAAuBJ,MAAvB,CAAnB;;AACA,cAAMK,MAAM,GAAG,MAAMnB,OAAO,CAACoB,YAAR,CAAqBN,MAArB,CAArB;;AACA,cAAMO,QAAQ,GAAG,MAAMrB,OAAO,CAACsB,cAAR,CAAuBR,MAAvB,CAAvB;;AAEAF,QAAAA,aAAa,CAAC;AACVW,UAAAA,IAAI,EAAEN,IAAI,CAACM,IADD;AAEVT,UAAAA,MAAM,EAAEG,IAAI,CAACO,EAFH;AAGVC,UAAAA,WAAW,EAAER,IAAI,CAACQ,WAHR;AAIVC,UAAAA,QAAQ,EAAET,IAAI,CAACU,aAAL,CAAmBC,OAJnB;AAKVC,UAAAA,IAAI,EAAE9B,YAAY,CAACkB,IALT;AAMVa,UAAAA,SAAS,EAAEb,IAAI,CAACa,SANN;AAOVC,UAAAA,KAAK,EAAEd,IAAI,CAACe,MAAL,CAAY,CAAZ,EAAeC,GAPZ;AAQVC,UAAAA,QAAQ,EAAEjB,IAAI,CAACiB,QARL;AASVf,UAAAA,MATU;AAUVE,UAAAA;AAVU,SAAD,CAAb;AAYAb,QAAAA,eAAe,CAAC,KAAD,CAAf;AACH,OAlBD,CAkBE,OAAM2B,GAAN,EAAW;AACT,cAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,KAxBD;AAyBH,GA1BQ,EA0BN,CAAC7B,QAAQ,CAACU,QAAV,CA1BM,CAAT;AA4BA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AACI,IAAA,OAAO,EAAEL,OADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAGI,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEA,OAAO,CAACuB,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAII,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE3B,SAAS,CAAC8B,QAAV,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH,CA/CD;;AAiDA,eAAevC,UAAU,CAACO,IAAD,CAAzB","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({ location }) => {\n    const [isLoading, updateIsLoading] = useState(true);\n    const [isFollowed, updateIsFollowed] = useState();\n    const [details, updateDetails] = useState({});\n\n    useEffect(() => {\n        (async () => {\n            updateIsFollowed(await Spotify.checkUserShow(showId));\n        })();\n    }, [isFollowed])\n\n    useEffect(() => {\n        (async () => {\n            const path = location.pathname;\n            const showId = extractId(path);\n            try {\n                const show = await Spotify.getShowDetails(showId);\n                const follow = () => Spotify.saveUserShow(showId);\n                const unfollow = () => Spotify.removeUserShow(showId);\n\n                updateDetails({\n                    name: show.name,\n                    showId: show.id,\n                    description: show.description,\n                    external: show.external_urls.spotify,\n                    type: SEARCH_TYPES.show,\n                    publisher: show.publisher,\n                    image: show.images[1].url,\n                    episodes: show.episodes,\n                    follow,\n                    unfollow\n                });\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [location.pathname]);\n\n    return (\n        <Fragment>\n            <Details\n                payload={details}/>\n            <EpisodesList episodes={details.episodes}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Show);"]},"metadata":{},"sourceType":"module"}