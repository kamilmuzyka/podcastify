{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst Episode = ({\n  location\n}) => {\n  const [isLoading, updateIsLoading] = useState(true);\n  const [details, updateDetails] = useState({});\n  const [episodes, updateEpisodes] = useState({});\n  useEffect(() => {\n    (async () => {\n      const path = location.pathname;\n      const episodeId = extractId(path);\n\n      try {\n        const episode = await Spotify.getEpisodeDetails(episodeId);\n        const show = await Spotify.getShowDetails(episode.show.id);\n        const several = show.episodes.items.filter(episode => episode.id !== episodeId).splice(0, 5);\n        updateDetails({\n          name: episode.name,\n          description: episode.description,\n          external: episode.external_urls.spotify,\n          type: SEARCH_TYPES.episode,\n          showName: episode.show.name,\n          showId: episode.show.id,\n          releaseDate: episode.release_date,\n          duration: episode.duration_ms\n        });\n        updateEpisodes(several);\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    payload: details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Episode);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Episodes/Episode/Episode.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","Details","WorkspaceLoading","Episode","location","isLoading","updateIsLoading","details","updateDetails","episodes","updateEpisodes","path","pathname","episodeId","episode","getEpisodeDetails","show","getShowDetails","id","several","items","filter","splice","name","description","external","external_urls","spotify","type","showName","showId","releaseDate","release_date","duration","duration_ms","err","Error","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9B,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BZ,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM,CAACa,OAAD,EAAUC,aAAV,IAA2Bd,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACe,QAAD,EAAWC,cAAX,IAA6BhB,QAAQ,CAAC,EAAD,CAA3C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,YAAMgB,IAAI,GAAGP,QAAQ,CAACQ,QAAtB;AACA,YAAMC,SAAS,GAAGb,SAAS,CAACW,IAAD,CAA3B;;AACA,UAAI;AACA,cAAMG,OAAO,GAAG,MAAMf,OAAO,CAACgB,iBAAR,CAA0BF,SAA1B,CAAtB;AACA,cAAMG,IAAI,GAAG,MAAMjB,OAAO,CAACkB,cAAR,CAAuBH,OAAO,CAACE,IAAR,CAAaE,EAApC,CAAnB;AACA,cAAMC,OAAO,GAAGH,IAAI,CAACP,QAAL,CAAcW,KAAd,CACXC,MADW,CACJP,OAAO,IAAIA,OAAO,CAACI,EAAR,KAAeL,SADtB,EAEXS,MAFW,CAEJ,CAFI,EAED,CAFC,CAAhB;AAGAd,QAAAA,aAAa,CAAC;AACVe,UAAAA,IAAI,EAAET,OAAO,CAACS,IADJ;AAEVC,UAAAA,WAAW,EAAEV,OAAO,CAACU,WAFX;AAGVC,UAAAA,QAAQ,EAAEX,OAAO,CAACY,aAAR,CAAsBC,OAHtB;AAIVC,UAAAA,IAAI,EAAE9B,YAAY,CAACgB,OAJT;AAKVe,UAAAA,QAAQ,EAAEf,OAAO,CAACE,IAAR,CAAaO,IALb;AAMVO,UAAAA,MAAM,EAAEhB,OAAO,CAACE,IAAR,CAAaE,EANX;AAOVa,UAAAA,WAAW,EAAEjB,OAAO,CAACkB,YAPX;AAQVC,UAAAA,QAAQ,EAAEnB,OAAO,CAACoB;AARR,SAAD,CAAb;AAUAxB,QAAAA,cAAc,CAACS,OAAD,CAAd;AACAb,QAAAA,eAAe,CAAC,KAAD,CAAf;AACH,OAlBD,CAkBE,OAAM6B,GAAN,EAAW;AACT,cAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,KAxBD;AAyBH,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAE5B,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEF,SAAS,CAACgC,QAAV,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAvCD;;AAyCA,eAAexC,UAAU,CAACM,OAAD,CAAzB","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport Details from '../../Details/Details';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\n\nconst Episode = ({ location }) => {\n    const [isLoading, updateIsLoading] = useState(true);\n    const [details, updateDetails] = useState({});\n    const [episodes, updateEpisodes] = useState({});\n\n    useEffect(() => {\n        (async () => {\n            const path = location.pathname;\n            const episodeId = extractId(path);\n            try {\n                const episode = await Spotify.getEpisodeDetails(episodeId);\n                const show = await Spotify.getShowDetails(episode.show.id);\n                const several = show.episodes.items\n                    .filter(episode => episode.id !== episodeId)\n                    .splice(0, 5);\n                updateDetails({\n                    name: episode.name,\n                    description: episode.description,\n                    external: episode.external_urls.spotify,\n                    type: SEARCH_TYPES.episode,\n                    showName: episode.show.name,\n                    showId: episode.show.id,\n                    releaseDate: episode.release_date,\n                    duration: episode.duration_ms\n                });\n                updateEpisodes(several);\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, []);\n\n    return (\n        <Fragment>\n            <Details payload={details}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Episode);"]},"metadata":{},"sourceType":"module"}