{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/contexts/PlayerContextProvider.js\";\nimport React, { createContext, useState, useContext, useRef } from 'react';\nimport { QueueContext } from './QueueContextProvider';\nexport const PlayerContext = createContext();\n\nconst PlayerContextProvider = props => {\n  const [isPlaying, updateIsPlaying] = useState(false); // const [audio, updateAudio] = useState();\n\n  const audioRef = useRef();\n  const {\n    currentEpisode,\n    loadQueueNext,\n    loadQueuePrevious\n  } = useContext(QueueContext);\n\n  const startPlaying = async () => {\n    if (audio && currentEpisode) {\n      updateIsPlaying(true);\n      const playPromise = audio.play();\n\n      if (playPromise !== undefined) {\n        await playPromise;\n      }\n    }\n  };\n\n  const stopPlaying = async () => {\n    if (audio && currentEpisode) {\n      updateIsPlaying(false);\n      const pausePromise = audio.pause();\n\n      if (pausePromise !== undefined) {\n        await pausePromise;\n      }\n    }\n  };\n\n  const resetPlayer = () => {\n    if (audio && currentEpisode) {\n      stopPlaying();\n      audio.currentTime = 0;\n      startPlaying();\n    }\n  };\n\n  const playNext = () => {\n    loadQueueNext();\n  };\n\n  const playPrevious = () => {\n    loadQueuePrevious();\n  };\n\n  return /*#__PURE__*/React.createElement(PlayerContext.Provider, {\n    value: {\n      isPlaying,\n      // updateAudio,\n      startPlaying,\n      stopPlaying,\n      playNext,\n      playPrevious,\n      resetPlayer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, props.children, /*#__PURE__*/React.createElement(\"audio\", {\n    src: currentEpisode === null || currentEpisode === void 0 ? void 0 : currentEpisode.audio_preview_url,\n    ref: audioRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PlayerContextProvider;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/contexts/PlayerContextProvider.js"],"names":["React","createContext","useState","useContext","useRef","QueueContext","PlayerContext","PlayerContextProvider","props","isPlaying","updateIsPlaying","audioRef","currentEpisode","loadQueueNext","loadQueuePrevious","startPlaying","audio","playPromise","play","undefined","stopPlaying","pausePromise","pause","resetPlayer","currentTime","playNext","playPrevious","children","audio_preview_url"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,EAAqDC,MAArD,QAAmE,OAAnE;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,OAAO,MAAMC,aAAa,GAAGL,aAAa,EAAnC;;AAEP,MAAMM,qBAAqB,GAAIC,KAAD,IAAW;AACrC,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BR,QAAQ,CAAC,KAAD,CAA7C,CADqC,CAErC;;AACA,QAAMS,QAAQ,GAAGP,MAAM,EAAvB;AACA,QAAM;AAAEQ,IAAAA,cAAF;AAAkBC,IAAAA,aAAlB;AAAiCC,IAAAA;AAAjC,MAAuDX,UAAU,CAACE,YAAD,CAAvE;;AAEA,QAAMU,YAAY,GAAG,YAAY;AAC7B,QAAIC,KAAK,IAAIJ,cAAb,EAA6B;AACzBF,MAAAA,eAAe,CAAC,IAAD,CAAf;AACA,YAAMO,WAAW,GAAGD,KAAK,CAACE,IAAN,EAApB;;AACA,UAAID,WAAW,KAAKE,SAApB,EAA+B;AAC3B,cAAMF,WAAN;AACH;AACJ;AACJ,GARD;;AAUA,QAAMG,WAAW,GAAG,YAAY;AAC5B,QAAIJ,KAAK,IAAIJ,cAAb,EAA6B;AACzBF,MAAAA,eAAe,CAAC,KAAD,CAAf;AACA,YAAMW,YAAY,GAAGL,KAAK,CAACM,KAAN,EAArB;;AACA,UAAID,YAAY,KAAKF,SAArB,EAAgC;AAC5B,cAAME,YAAN;AACH;AACJ;AACJ,GARD;;AAUA,QAAME,WAAW,GAAG,MAAM;AACtB,QAAIP,KAAK,IAAIJ,cAAb,EAA6B;AACzBQ,MAAAA,WAAW;AACXJ,MAAAA,KAAK,CAACQ,WAAN,GAAoB,CAApB;AACAT,MAAAA,YAAY;AACf;AACJ,GAND;;AAQA,QAAMU,QAAQ,GAAG,MAAM;AACnBZ,IAAAA,aAAa;AAChB,GAFD;;AAIA,QAAMa,YAAY,GAAG,MAAM;AACvBZ,IAAAA,iBAAiB;AACpB,GAFD;;AAIA,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BL,MAAAA,SAD2B;AAE3B;AACAM,MAAAA,YAH2B;AAI3BK,MAAAA,WAJ2B;AAK3BK,MAAAA,QAL2B;AAM3BC,MAAAA,YAN2B;AAO3BH,MAAAA;AAP2B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKf,KAAK,CAACmB,QATX,eAUI;AAAO,IAAA,GAAG,EAAEf,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAEgB,iBAA5B;AAA+C,IAAA,GAAG,EAAEjB,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADJ;AAcH,CAxDD;;AA0DA,eAAeJ,qBAAf","sourcesContent":["import React, { createContext, useState, useContext, useRef } from 'react';\nimport { QueueContext } from './QueueContextProvider';\n\nexport const PlayerContext = createContext();\n\nconst PlayerContextProvider = (props) => {\n    const [isPlaying, updateIsPlaying] = useState(false);\n    // const [audio, updateAudio] = useState();\n    const audioRef = useRef();\n    const { currentEpisode, loadQueueNext, loadQueuePrevious } = useContext(QueueContext);\n\n    const startPlaying = async () => {\n        if (audio && currentEpisode) {\n            updateIsPlaying(true);\n            const playPromise = audio.play();\n            if (playPromise !== undefined) {\n                await playPromise;\n            }\n        }\n    }\n\n    const stopPlaying = async () => {\n        if (audio && currentEpisode) {\n            updateIsPlaying(false);\n            const pausePromise = audio.pause();\n            if (pausePromise !== undefined) {\n                await pausePromise;\n            }\n        }\n    }\n\n    const resetPlayer = () => {\n        if (audio && currentEpisode) {\n            stopPlaying();\n            audio.currentTime = 0;\n            startPlaying();\n        }\n    }\n\n    const playNext = () => {\n        loadQueueNext();\n    }\n\n    const playPrevious = () => {\n        loadQueuePrevious();\n    }\n\n    return (\n        <PlayerContext.Provider value={{\n            isPlaying,\n            // updateAudio,\n            startPlaying,\n            stopPlaying,\n            playNext,\n            playPrevious,\n            resetPlayer\n        }}>\n            {props.children}\n            <audio src={currentEpisode?.audio_preview_url} ref={audioRef}/>\n        </PlayerContext.Provider>\n    );\n}\n\nexport default PlayerContextProvider;"]},"metadata":{},"sourceType":"module"}