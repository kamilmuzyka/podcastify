{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js\";\nimport React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { SearchContext } from '../../../contexts/SearchContextProvider';\nimport Spotify from '../../../models/Spotify';\nimport Tiles from '../Tiles/Tiles';\nimport Tile from '../Tiles/Tile/Tile';\n\nfunction SearchResults(props) {\n  const [shows, updateShows] = useState([]);\n  const [episodes, updateEpisodes] = useState([]);\n  const [isMounted, updateIsMounted] = useState(false);\n  const {\n    query,\n    updateQuery\n  } = useContext(SearchContext);\n  const {\n    searching,\n    updateSearching\n  } = useContext(SearchContext);\n\n  function prepareShows(shows) {\n    if (shows.length === 0) {\n      updateShows([]);\n      return;\n    }\n\n    const updatedShows = shows.map(show => {\n      return /*#__PURE__*/React.createElement(Tile, {\n        key: show.id,\n        title: show.name,\n        description: show.description,\n        image: show.images[1].url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 20\n        }\n      });\n    });\n    updateShows(updatedShows);\n  }\n\n  function prepareEpisodes(episodes) {\n    if (episodes.length === 0) {\n      updateEpisodes([]);\n      return;\n    }\n\n    const updatedEpisodes = episodes.map(episode => {\n      return /*#__PURE__*/React.createElement(Tile, {\n        key: episode.id,\n        title: episode.name,\n        description: episode.description,\n        image: episode.images[1].url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 20\n        }\n      });\n    });\n    updateEpisodes(updatedEpisodes);\n  }\n\n  useEffect(() => {\n    if (!searching) {\n      return;\n    }\n\n    updateIsMounted(true);\n\n    if (query) {\n      (async () => {\n        const results = await Spotify.getSearchResults(query);\n\n        if (isMounted) {\n          prepareShows(results.shows.items);\n          prepareEpisodes(results.episodes.items);\n        }\n      })();\n    }\n\n    return () => {\n      updateIsMounted(false);\n    };\n  }, [isMounted, query]);\n  useEffect(() => {\n    return () => {\n      updateSearching(false);\n      updateQuery('');\n    };\n  }, []); // if(shows.length > 0 && episodes.length)\n\n  return searching ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tiles, {\n    title: \"Shows\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, shows), /*#__PURE__*/React.createElement(Tiles, {\n    title: \"Episodes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, episodes)) : /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default SearchResults;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js"],"names":["React","useState","useContext","useEffect","Fragment","Redirect","SearchContext","Spotify","Tiles","Tile","SearchResults","props","shows","updateShows","episodes","updateEpisodes","isMounted","updateIsMounted","query","updateQuery","searching","updateSearching","prepareShows","length","updatedShows","map","show","id","name","description","images","url","prepareEpisodes","updatedEpisodes","episode","results","getSearchResults","items"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { SearchContext } from '../../../contexts/SearchContextProvider';\nimport Spotify from '../../../models/Spotify';\nimport Tiles from '../Tiles/Tiles';\nimport Tile from '../Tiles/Tile/Tile';\n\nfunction SearchResults(props) {\n    const [shows, updateShows] = useState([]);\n    const [episodes, updateEpisodes] = useState([]);\n    const [isMounted, updateIsMounted] = useState(false);\n    const { query, updateQuery } = useContext(SearchContext);\n    const { searching, updateSearching } = useContext(SearchContext);\n\n    function prepareShows(shows) {\n        if(shows.length === 0) {\n            updateShows([]);\n            return;\n        }\n\n        const updatedShows = shows.map(show => {\n            return <Tile\n                key={show.id}\n                title={show.name}\n                description={show.description}\n                image={show.images[1].url} />\n        });\n\n        updateShows(updatedShows);\n    }\n\n    function prepareEpisodes(episodes) {\n        if (episodes.length === 0) {\n            updateEpisodes([]);\n            return;\n        }\n\n        const updatedEpisodes = episodes.map(episode => {\n            return <Tile\n                key={episode.id}\n                title={episode.name}\n                description={episode.description}\n                image={episode.images[1].url} />\n        });\n\n        updateEpisodes(updatedEpisodes);\n    }\n\n    useEffect(() => {\n        if(!searching) {\n            return;\n        }\n\n\n        updateIsMounted(true);\n\n        if(query) {\n            (async () => {\n                const results = await Spotify.getSearchResults(query);\n                if(isMounted) {\n                    prepareShows(results.shows.items);\n                    prepareEpisodes(results.episodes.items);\n                }\n            })();\n        }\n\n        return () => {\n            updateIsMounted(false);\n        };\n    }, [isMounted, query]);\n\n    useEffect(() => {\n        return () => {\n            updateSearching(false);\n            updateQuery('');\n        }\n    }, []);\n\n    // if(shows.length > 0 && episodes.length)\n\n    return (\n        (searching) ?\n        <Fragment>\n            <Tiles title=\"Shows\">\n                {shows}\n            </Tiles>\n            <Tiles title=\"Episodes\">\n                {episodes}\n            </Tiles>\n        </Fragment>\n        :\n        <Redirect to=\"/\"/>\n    );\n}\n\nexport default SearchResults;"]},"metadata":{},"sourceType":"module"}