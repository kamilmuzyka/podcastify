{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js\";\nimport React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { SearchContext } from '../../../contexts/SearchContextProvider';\nimport Spotify from '../../../models/Spotify';\nimport Tiles from '../Tiles/Tiles';\nimport Tile from '../Tiles/Tile/Tile';\n\nfunction SearchResults(props) {\n  const [showsData, updateShowsData] = useState([]);\n  const [episodesData, updateEpisodesData] = useState([]);\n  const {\n    query,\n    updateQuery\n  } = useContext(SearchContext);\n  const {\n    searching,\n    updateSearching\n  } = useContext(SearchContext);\n\n  function prepareShowElements(showsData) {\n    if (showsData.length === 0) {\n      updateShowsData([]);\n      return;\n    }\n  }\n\n  function prepareEpisodeElements(episodesData) {\n    if (episodesData.length === 0) {\n      updateEpisodesData([]);\n      return;\n    }\n\n    const newEpisodes = episodes.map((episode, index) => {\n      return /*#__PURE__*/React.createElement(Tile, {\n        key: episode.id,\n        title: episode.name,\n        description: episode.description,\n        image: episode.images[1].url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 20\n        }\n      });\n    });\n    updateEpisodes(newEpisodes);\n  }\n\n  useEffect(() => {\n    if (!searching) {\n      return;\n    }\n\n    let mounted = true;\n\n    if (query) {\n      (async () => {\n        const results = await Spotify.getSearchResults(query);\n\n        if (mounted) {\n          prepareShowElements(results.shows.items);\n          prepareEpisodeElements(results.episodes.items);\n        }\n      })();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [query]);\n  useEffect(() => {\n    return () => {\n      updateSearching(false);\n      updateQuery('');\n    };\n  }, []);\n  return searching ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tiles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, episodes)) : /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default SearchResults;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js"],"names":["React","useState","useContext","useEffect","Fragment","Redirect","SearchContext","Spotify","Tiles","Tile","SearchResults","props","showsData","updateShowsData","episodesData","updateEpisodesData","query","updateQuery","searching","updateSearching","prepareShowElements","length","prepareEpisodeElements","newEpisodes","episodes","map","episode","index","id","name","description","images","url","updateEpisodes","mounted","results","getSearchResults","shows","items"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BZ,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACa,YAAD,EAAeC,kBAAf,IAAqCd,QAAQ,CAAC,EAAD,CAAnD;AACA,QAAM;AAAEe,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAyBf,UAAU,CAACI,aAAD,CAAzC;AACA,QAAM;AAAEY,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAiCjB,UAAU,CAACI,aAAD,CAAjD;;AAEA,WAASc,mBAAT,CAA6BR,SAA7B,EAAwC;AACpC,QAAGA,SAAS,CAACS,MAAV,KAAqB,CAAxB,EAA2B;AACvBR,MAAAA,eAAe,CAAC,EAAD,CAAf;AACA;AACH;AACJ;;AAED,WAASS,sBAAT,CAAgCR,YAAhC,EAA8C;AAC1C,QAAIA,YAAY,CAACO,MAAb,KAAwB,CAA5B,EAA+B;AAC3BN,MAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACA;AACH;;AAED,UAAMQ,WAAW,GAAGC,QAAQ,CAACC,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACjD,0BAAO,oBAAC,IAAD;AACH,QAAA,GAAG,EAAED,OAAO,CAACE,EADV;AAEH,QAAA,KAAK,EAAEF,OAAO,CAACG,IAFZ;AAGH,QAAA,WAAW,EAAEH,OAAO,CAACI,WAHlB;AAIH,QAAA,KAAK,EAAEJ,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBC,GAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAKH,KANmB,CAApB;AAQAC,IAAAA,cAAc,CAACV,WAAD,CAAd;AACH;;AAEDpB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACe,SAAJ,EAAe;AACX;AACH;;AACD,QAAIgB,OAAO,GAAG,IAAd;;AACA,QAAGlB,KAAH,EAAU;AACN,OAAC,YAAY;AACT,cAAMmB,OAAO,GAAG,MAAM5B,OAAO,CAAC6B,gBAAR,CAAyBpB,KAAzB,CAAtB;;AACA,YAAGkB,OAAH,EAAY;AACRd,UAAAA,mBAAmB,CAACe,OAAO,CAACE,KAAR,CAAcC,KAAf,CAAnB;AACAhB,UAAAA,sBAAsB,CAACa,OAAO,CAACX,QAAR,CAAiBc,KAAlB,CAAtB;AACH;AACJ,OAND;AAOH;;AAED,WAAO,MAAM;AACTJ,MAAAA,OAAO,GAAG,KAAV;AACH,KAFD;AAGH,GAlBQ,EAkBN,CAAClB,KAAD,CAlBM,CAAT;AAoBAb,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTgB,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,MAAAA,WAAW,CAAC,EAAD,CAAX;AACH,KAHD;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,SACKC,SAAD,gBACA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKM,QADL,CADJ,CADA,gBAOA,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ;AAUH;;AAED,eAAed,aAAf","sourcesContent":["import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { SearchContext } from '../../../contexts/SearchContextProvider';\nimport Spotify from '../../../models/Spotify';\nimport Tiles from '../Tiles/Tiles';\nimport Tile from '../Tiles/Tile/Tile';\n\nfunction SearchResults(props) {\n    const [showsData, updateShowsData] = useState([]);\n    const [episodesData, updateEpisodesData] = useState([]);\n    const { query, updateQuery } = useContext(SearchContext);\n    const { searching, updateSearching } = useContext(SearchContext);\n\n    function prepareShowElements(showsData) {\n        if(showsData.length === 0) {\n            updateShowsData([]);\n            return;\n        }\n    }\n\n    function prepareEpisodeElements(episodesData) {\n        if (episodesData.length === 0) {\n            updateEpisodesData([]);\n            return;\n        }\n\n        const newEpisodes = episodes.map((episode, index) => {\n            return <Tile\n                key={episode.id}\n                title={episode.name}\n                description={episode.description}\n                image={episode.images[1].url} />\n        });\n\n        updateEpisodes(newEpisodes);\n    }\n\n    useEffect(() => {\n        if(!searching) {\n            return;\n        }\n        let mounted = true;\n        if(query) {\n            (async () => {\n                const results = await Spotify.getSearchResults(query);\n                if(mounted) {\n                    prepareShowElements(results.shows.items);\n                    prepareEpisodeElements(results.episodes.items);\n                }\n            })();\n        }\n\n        return () => {\n            mounted = false\n        };\n    }, [query]);\n\n    useEffect(() => {\n        return () => {\n            updateSearching(false);\n            updateQuery('');\n        }\n    }, [])\n\n    return (\n        (searching) ?\n        <Fragment>\n            <Tiles>\n                {episodes}\n            </Tiles>\n        </Fragment>\n        :\n        <Redirect to=\"/\"/>\n    );\n}\n\nexport default SearchResults;"]},"metadata":{},"sourceType":"module"}