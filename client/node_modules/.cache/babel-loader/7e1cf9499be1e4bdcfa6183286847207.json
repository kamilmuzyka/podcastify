{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({\n  location\n}) => {\n  const [isLoading, updateIsLoading] = useState(true);\n  const [isFollowed, updateIsFollowed] = useState();\n  const [details, updateDetails] = useState({});\n\n  const handleShowFollow = id => {\n    Spotify.saveUserShow(id);\n    updateIsFollowed(true);\n  };\n\n  const handleShowUnfollow = id => {\n    Spotify.removeUserShow(id);\n    updateIsFollowed(false);\n  };\n\n  useEffect(() => {\n    (async () => {\n      const path = location.pathname;\n      const showId = extractId(path);\n\n      try {\n        const show = await Spotify.getShowDetails(showId);\n        updateIsFollowed(await Spotify.checkUserShow(showId));\n        updateDetails({\n          name: show.name,\n          showId: show.id,\n          description: show.description,\n          external: show.external_urls.spotify,\n          type: SEARCH_TYPES.show,\n          publisher: show.publisher,\n          image: show.images[1].url,\n          episodes: show.episodes,\n          isFollowed,\n          follow: () => handleShowFollow(showId),\n          unfollow: () => handleShowUnfollow(showId)\n        });\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [location.pathname, isFollowed]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    payload: details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EpisodesList, {\n    episodes: details.episodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Show);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","WorkspaceLoading","Details","EpisodesList","Show","location","isLoading","updateIsLoading","isFollowed","updateIsFollowed","details","updateDetails","handleShowFollow","id","saveUserShow","handleShowUnfollow","removeUserShow","path","pathname","showId","show","getShowDetails","checkUserShow","name","description","external","external_urls","spotify","type","publisher","image","images","url","episodes","follow","unfollow","err","Error","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({ location }) => {\n    const [isLoading, updateIsLoading] = useState(true);\n    const [isFollowed, updateIsFollowed] = useState();\n    const [details, updateDetails] = useState({});\n\n    const handleShowFollow = (id) => {\n        Spotify.saveUserShow(id);\n        updateIsFollowed(true);\n    };\n\n    const handleShowUnfollow = (id) => {\n        Spotify.removeUserShow(id)\n        updateIsFollowed(false);\n    };\n\n    useEffect(() => {\n        (async () => {\n            const path = location.pathname;\n            const showId = extractId(path);\n            try {\n                const show = await Spotify.getShowDetails(showId);\n                updateIsFollowed(await Spotify.checkUserShow(showId));\n                updateDetails({\n                    name: show.name,\n                    showId: show.id,\n                    description: show.description,\n                    external: show.external_urls.spotify,\n                    type: SEARCH_TYPES.show,\n                    publisher: show.publisher,\n                    image: show.images[1].url,\n                    episodes: show.episodes,\n                    isFollowed,\n                    follow: () => handleShowFollow(showId),\n                    unfollow: () => handleShowUnfollow(showId)\n                });\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [location.pathname, isFollowed]);\n\n    return (\n        <Fragment>\n            <Details payload={details}/>\n            <EpisodesList episodes={details.episodes}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Show);"]},"metadata":{},"sourceType":"module"}