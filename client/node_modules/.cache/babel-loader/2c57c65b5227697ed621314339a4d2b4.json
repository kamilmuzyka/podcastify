{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({\n  location\n}) => {\n  const SHOW_ID = extractId(location.pathname);\n  const [status, updateStatus] = useState(null);\n  const [details, updateDetails] = useState({});\n  const [library, updateLibrary] = useState({});\n  const [isLoading, updateIsLoading] = useState(true);\n\n  const handleShowFollow = id => {\n    Spotify.saveUserShow(id);\n    updateStatus(true);\n  };\n\n  const handleShowUnfollow = id => {\n    Spotify.removeUserShow(id);\n    updateStatus(false);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (Object.keys(details).length === 0) {\n          const [show, inLibrary] = await Promise.all([Spotify.getShowDetails(SHOW_ID), Spotify.checkUserShow(SHOW_ID)]);\n          updateDetails({\n            name: show.name,\n            showId: show.id,\n            description: show.description,\n            external: show.external_urls.spotify,\n            type: SEARCH_TYPES.show,\n            publisher: show.publisher,\n            image: show.images[1].url,\n            episodes: show.episodes\n          });\n          updateLibrary({\n            inLibrary,\n            addToLibraryText: 'Follow',\n            removeFromLibraryText: 'Unfollow',\n            addToLibrary: () => handleShowFollow(SHOW_ID),\n            removeFromLibrary: () => handleShowUnfollow(SHOW_ID)\n          });\n        } else {\n          const inLibrary = await Spotify.checkUserShow(SHOW_ID);\n          updateLibrary(prev => {\n            return { ...prev,\n              inLibrary\n            };\n          });\n        }\n\n        updateIsLoading(false);\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }, [SHOW_ID, status]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Details, {\n    details: details,\n    library: library,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EpisodesList, {\n    episodes: details.episodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceLoading, {\n    loading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Show);","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Shows/Show/Show.js"],"names":["React","useState","useEffect","Fragment","withRouter","SEARCH_TYPES","Spotify","extractId","WorkspaceLoading","Details","EpisodesList","Show","location","SHOW_ID","pathname","status","updateStatus","details","updateDetails","library","updateLibrary","isLoading","updateIsLoading","handleShowFollow","id","saveUserShow","handleShowUnfollow","removeUserShow","Object","keys","length","show","inLibrary","Promise","all","getShowDetails","checkUserShow","name","showId","description","external","external_urls","spotify","type","publisher","image","images","url","episodes","addToLibraryText","removeFromLibraryText","addToLibrary","removeFromLibrary","prev","err","Error","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { SEARCH_TYPES } from '../../../../constants';\nimport Spotify from '../../../../models/Spotify';\nimport extractId from '../../../../utils/extractId';\nimport WorkspaceLoading from '../../WorkspaceLoading/WorkspaceLoading';\nimport Details from '../../Details/Details';\nimport EpisodesList from '../../Episodes/EpisodesList/EpisodesList';\n\nconst Show = ({ location }) => {\n    const SHOW_ID = extractId(location.pathname);\n    const [status, updateStatus] = useState(null);\n    const [details, updateDetails] = useState({});\n    const [library, updateLibrary] = useState({});\n    const [isLoading, updateIsLoading] = useState(true);\n\n    const handleShowFollow = (id) => {\n        Spotify.saveUserShow(id);\n        updateStatus(true);\n    };\n\n    const handleShowUnfollow = (id) => {\n        Spotify.removeUserShow(id);\n        updateStatus(false);\n    };\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if(Object.keys(details).length === 0) {\n                    const [show, inLibrary] = await Promise.all([\n                        Spotify.getShowDetails(SHOW_ID),\n                        Spotify.checkUserShow(SHOW_ID)\n                    ]);\n                    updateDetails({\n                        name: show.name,\n                        showId: show.id,\n                        description: show.description,\n                        external: show.external_urls.spotify,\n                        type: SEARCH_TYPES.show,\n                        publisher: show.publisher,\n                        image: show.images[1].url,\n                        episodes: show.episodes\n                    });\n                    updateLibrary({\n                        inLibrary,\n                        addToLibraryText: 'Follow',\n                        removeFromLibraryText: 'Unfollow',\n                        addToLibrary: () => handleShowFollow(SHOW_ID),\n                        removeFromLibrary: () => handleShowUnfollow(SHOW_ID)\n                    });\n                } else {\n                    const inLibrary = await Spotify.checkUserShow(SHOW_ID);\n                    updateLibrary((prev) => {\n                        return {\n                            ...prev,\n                            inLibrary\n                        }\n                    });\n                }\n                updateIsLoading(false);\n            } catch(err) {\n                throw new Error(err);\n            }\n        })();\n    }, [SHOW_ID, status]);\n\n    return (\n        <Fragment>\n            <Details details={details} library={library}/>\n            <EpisodesList episodes={details.episodes}/>\n            <WorkspaceLoading loading={isLoading.toString()}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(Show);"]},"metadata":{},"sourceType":"module"}