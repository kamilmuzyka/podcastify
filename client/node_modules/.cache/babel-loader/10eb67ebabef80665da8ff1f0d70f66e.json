{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/contexts/QueueContextProvider.js\";\nimport React, { createContext, useState } from 'react';\nexport const QueueContext = createContext();\n\nconst QueueContextProvider = props => {\n  const [queue, updateQueue] = useState([]);\n  const [queueHead, updateQueueHead] = useState(0);\n  const [currentEpisode, updateCurrentEpisode] = useState();\n\n  const loadQueue = (currentEpisodeId, currentShowId, currentShowEpisodes) => {\n    const currentIndex = currentShowEpisodes.findIndex(episode => episode.id === currentEpisodeId) || 0;\n    updateQueue(currentShowEpisodes);\n    updateQueueHead(currentIndex);\n    updateCurrentEpisode(currentShowEpisodes[currentIndex]);\n  };\n\n  const loadQueueNext = () => {\n    if (queueHead < queue.length - 1) {\n      updateCurrentEpisode(queue[queueHead + 1]);\n      updateQueueHead(prev => prev + 1);\n    } else {\n      updateCurrentEpisode(queue[0]);\n      updateQueueHead(0);\n    }\n  };\n\n  const loadQueuePrevious = () => {\n    if (queueHead > 0) {\n      updateCurrentEpisode(queue[queueHead - 1]);\n      updateQueueHead(prev => prev - 1);\n    } else {\n      updateCurrentEpisode(queue[queue.length - 1]);\n      updateQueueHead(queue.length - 1);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(QueueContext.Provider, {\n    value: {\n      queue,\n      queueHead,\n      currentEpisode,\n      loadQueue,\n      loadQueueNext,\n      loadQueuePrevious\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default QueueContextProvider;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/contexts/QueueContextProvider.js"],"names":["React","createContext","useState","QueueContext","QueueContextProvider","props","queue","updateQueue","queueHead","updateQueueHead","currentEpisode","updateCurrentEpisode","loadQueue","currentEpisodeId","currentShowId","currentShowEpisodes","currentIndex","findIndex","episode","id","loadQueueNext","length","prev","loadQueuePrevious","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,YAAY,GAAGF,aAAa,EAAlC;;AAEP,MAAMG,oBAAoB,GAAIC,KAAD,IAAW;AACpC,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBL,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACM,SAAD,EAAYC,eAAZ,IAA+BP,QAAQ,CAAC,CAAD,CAA7C;AACA,QAAM,CAACQ,cAAD,EAAiBC,oBAAjB,IAAyCT,QAAQ,EAAvD;;AAEA,QAAMU,SAAS,GAAG,CAACC,gBAAD,EAAmBC,aAAnB,EAAkCC,mBAAlC,KAA0D;AAC1E,UAAMC,YAAY,GAAGD,mBAAmB,CACrCE,SADkB,CACRC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,gBADlB,KACuC,CAD5D;AAEAN,IAAAA,WAAW,CAACQ,mBAAD,CAAX;AACAN,IAAAA,eAAe,CAACO,YAAD,CAAf;AACAL,IAAAA,oBAAoB,CAACI,mBAAmB,CAACC,YAAD,CAApB,CAApB;AACD,GAND;;AAQA,QAAMI,aAAa,GAAG,MAAM;AAC1B,QAAIZ,SAAS,GAAGF,KAAK,CAACe,MAAN,GAAe,CAA/B,EAAkC;AAChCV,MAAAA,oBAAoB,CAACL,KAAK,CAACE,SAAS,GAAG,CAAb,CAAN,CAApB;AACAC,MAAAA,eAAe,CAACa,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAf;AACD,KAHD,MAGO;AACLX,MAAAA,oBAAoB,CAACL,KAAK,CAAC,CAAD,CAAN,CAApB;AACAG,MAAAA,eAAe,CAAC,CAAD,CAAf;AACD;AACF,GARD;;AAUA,QAAMc,iBAAiB,GAAG,MAAM;AAC9B,QAAIf,SAAS,GAAG,CAAhB,EAAmB;AACjBG,MAAAA,oBAAoB,CAACL,KAAK,CAACE,SAAS,GAAG,CAAb,CAAN,CAApB;AACAC,MAAAA,eAAe,CAACa,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAf;AACD,KAHD,MAGO;AACLX,MAAAA,oBAAoB,CAACL,KAAK,CAACA,KAAK,CAACe,MAAN,GAAe,CAAhB,CAAN,CAApB;AACAZ,MAAAA,eAAe,CAACH,KAAK,CAACe,MAAN,GAAe,CAAhB,CAAf;AACD;AACF,GARD;;AAUA,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC1Bf,MAAAA,KAD0B;AAE1BE,MAAAA,SAF0B;AAG1BE,MAAAA,cAH0B;AAI1BE,MAAAA,SAJ0B;AAK1BQ,MAAAA,aAL0B;AAM1BG,MAAAA;AAN0B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKlB,KAAK,CAACmB,QARX,CADJ;AAYH,CA7CD;;AA+CA,eAAepB,oBAAf","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const QueueContext = createContext();\n\nconst QueueContextProvider = (props) => {\n    const [queue, updateQueue] = useState([]);\n    const [queueHead, updateQueueHead] = useState(0);\n    const [currentEpisode, updateCurrentEpisode] = useState();\n\n    const loadQueue = (currentEpisodeId, currentShowId, currentShowEpisodes) => {\n      const currentIndex = currentShowEpisodes\n        .findIndex(episode => episode.id === currentEpisodeId) || 0;\n      updateQueue(currentShowEpisodes);\n      updateQueueHead(currentIndex);\n      updateCurrentEpisode(currentShowEpisodes[currentIndex]);\n    }\n\n    const loadQueueNext = () => {\n      if (queueHead < queue.length - 1) {\n        updateCurrentEpisode(queue[queueHead + 1]);\n        updateQueueHead(prev => prev + 1);\n      } else {\n        updateCurrentEpisode(queue[0]);\n        updateQueueHead(0);\n      }\n    }\n\n    const loadQueuePrevious = () => {\n      if (queueHead > 0) {\n        updateCurrentEpisode(queue[queueHead - 1]);\n        updateQueueHead(prev => prev - 1);\n      } else {\n        updateCurrentEpisode(queue[queue.length - 1]);\n        updateQueueHead(queue.length - 1);\n      }\n    }\n\n    return (\n        <QueueContext.Provider value={{\n            queue,\n            queueHead,\n            currentEpisode,\n            loadQueue,\n            loadQueueNext,\n            loadQueuePrevious\n        }}>\n            {props.children}\n        </QueueContext.Provider>\n    );\n}\n\nexport default QueueContextProvider;"]},"metadata":{},"sourceType":"module"}