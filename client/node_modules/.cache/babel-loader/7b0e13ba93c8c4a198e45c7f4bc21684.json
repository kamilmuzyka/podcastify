{"ast":null,"code":"class Spotify {\n  static retrieveAccessToken() {\n    const access = localStorage.getItem('access');\n\n    if (!access) {\n      throw new Error('No access token found');\n    }\n\n    const {\n      token\n    } = JSON.parse(access);\n    return token;\n  }\n\n  static async getSearchResults(query) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=show,episode&limit=50`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await response.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getShowDetails(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/shows/${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await response.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getEpisodeDetails(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/episodes/${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await response.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getUserProfile() {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await response.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async getUserShows() {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/shows?limit=50`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await response.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async checkUserShow(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/shows/contains?ids=${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await response.json();\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async saveUserShow(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      fetch(`https://api.spotify.com/v1/me/shows?ids=${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        },\n        method: 'PUT'\n      });\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  static async removeUserShow(id) {\n    const token = this.retrieveAccessToken();\n\n    try {\n      fetch(`https://api.spotify.com/v1/me/shows?ids=${id}`, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        },\n        method: 'DELETE'\n      });\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/models/Spotify.js"],"names":["Spotify","retrieveAccessToken","access","localStorage","getItem","Error","token","JSON","parse","getSearchResults","query","response","fetch","headers","json","err","getShowDetails","id","getEpisodeDetails","getUserProfile","getUserShows","checkUserShow","saveUserShow","method","removeUserShow"],"mappings":"AAAA,MAAMA,OAAN,CAAc;AACV,SAAOC,mBAAP,GAA6B;AACzB,UAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;;AACA,QAAI,CAACF,MAAL,EAAa;AACT,YAAM,IAAIG,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,UAAM;AACFC,MAAAA;AADE,QAEFC,IAAI,CAACC,KAAL,CAAWN,MAAX,CAFJ;AAGA,WAAOI,KAAP;AACH;;AAED,eAAaG,gBAAb,CAA8BC,KAA9B,EAAqC;AACjC,UAAMJ,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsCF,KAAM,6BAA9C,EAA4E;AACpGG,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AAD2F,OAA5E,CAA5B;AAKA,aAAO,MAAMK,QAAQ,CAACG,IAAT,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaC,cAAb,CAA4BC,EAA5B,EAAgC;AAC5B,UAAMX,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmCK,EAAG,EAAxC,EAA2C;AACnEJ,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AAD0D,OAA3C,CAA5B;AAKA,aAAO,MAAMK,QAAQ,CAACG,IAAT,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaG,iBAAb,CAA+BD,EAA/B,EAAmC;AAC/B,UAAMX,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsCK,EAAG,EAA3C,EAA8C;AACtEJ,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AAD6D,OAA9C,CAA5B;AAKA,aAAO,MAAMK,QAAQ,CAACG,IAAT,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaI,cAAb,GAA8B;AAC1B,UAAMb,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAAF,EAAkC;AAC1DC,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AADiD,OAAlC,CAA5B;AAKA,aAAO,MAAMK,QAAQ,CAACG,IAAT,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaK,YAAb,GAA4B;AACxB,UAAMd,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,8CAAF,EAAiD;AACzEC,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AADgE,OAAjD,CAA5B;AAKA,aAAO,MAAMK,QAAQ,CAACG,IAAT,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaM,aAAb,CAA2BJ,EAA3B,EAA+B;AAC3B,UAAMX,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,oDAAmDK,EAAG,EAAxD,EAA2D;AACnFJ,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB;AAD0E,OAA3D,CAA5B;AAKA,aAAO,MAAMK,QAAQ,CAACG,IAAT,EAAb;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaO,YAAb,CAA0BL,EAA1B,EAA8B;AAC1B,UAAMX,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI;AACAW,MAAAA,KAAK,CAAE,2CAA0CK,EAAG,EAA/C,EAAkD;AACnDJ,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB,SAD0C;AAInDiB,QAAAA,MAAM,EAAE;AAJ2C,OAAlD,CAAL;AAMH,KAPD,CAOE,OAAOR,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AAED,eAAaS,cAAb,CAA4BP,EAA5B,EAAgC;AAC5B,UAAMX,KAAK,GAAG,KAAKL,mBAAL,EAAd;;AACA,QAAI;AACAW,MAAAA,KAAK,CAAE,2CAA0CK,EAAG,EAA/C,EAAkD;AACnDJ,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYP;AADxB,SAD0C;AAInDiB,QAAAA,MAAM,EAAE;AAJ2C,OAAlD,CAAL;AAMH,KAPD,CAOE,OAAOR,GAAP,EAAY;AACV,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AACH;AACJ;;AA1HS;;AA6Hd,eAAef,OAAf","sourcesContent":["class Spotify {\n    static retrieveAccessToken() {\n        const access = localStorage.getItem('access');\n        if (!access) {\n            throw new Error('No access token found');\n        }\n        const {\n            token\n        } = JSON.parse(access);\n        return token;\n    }\n\n    static async getSearchResults(query) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=show,episode&limit=50`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await response.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getShowDetails(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/shows/${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await response.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getEpisodeDetails(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/episodes/${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await response.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getUserProfile() {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await response.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async getUserShows() {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me/shows?limit=50`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await response.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async checkUserShow(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            const response = await fetch(`https://api.spotify.com/v1/me/shows/contains?ids=${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                }\n            });\n            return await response.json();\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async saveUserShow(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            fetch(`https://api.spotify.com/v1/me/shows?ids=${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'PUT'\n            });\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n\n    static async removeUserShow(id) {\n        const token = this.retrieveAccessToken();\n        try {\n            fetch(`https://api.spotify.com/v1/me/shows?ids=${id}`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'DELETE'\n            });\n        } catch (err) {\n            throw new Error(err);\n        }\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}