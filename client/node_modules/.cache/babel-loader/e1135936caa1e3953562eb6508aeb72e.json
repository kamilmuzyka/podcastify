{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js\";\nimport React, { useState, useContext, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nimport PlayButton from '../../../UI/PlayButton/PlayButton';\nimport PauseButton from '../../../UI/PauseButton/PauseButton';\nimport SkipButton from '../../../UI/SkipButton/SkipButton';\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\nconst Progress = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\nconst Bar = styled.div`\n    width: ${({\n  percentage\n}) => percentage ? percentage : 0}%; // Dynamic\n    height: 100%;\n    background-color: ${({\n  theme\n}) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\nconst Controls = styled.div`\n    display: flex;\n    align-items: center;\n    @media (min-width: 500px) {\n        order: 2;\n        flex: 1;\n        justify-content: center;\n    }\n    @media (min-width: 1380px) {\n        position: absolute;\n        top: 1.25em;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`;\nconst MiddleButton = styled.div`\n    display: inline-block;\n    margin: 0 1em;\n`;\nconst Episode = styled.div`\n    font-size: ${({\n  theme\n}) => theme.typography.small};\n    color: ${({\n  theme\n}) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        object-fit: cover;\n    }\n`;\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = props => {\n  const [isPlaying, updateIsPlaying] = useState(false);\n  const [progressPercentage, updateProgressPercentage] = useState(0);\n  const [progressInterval, updateProgressInterval] = useState();\n  const {\n    currentEpisode\n  } = useContext(PlayerContext);\n  const audioRef = useRef();\n  const progressRef = useRef(); // Does it make sense to set and cancel intervals?\n  // Are multiple state updates better for the performance\n  // than a single interval running in the background any time?\n\n  useEffect(() => {\n    if (isPlaying) {\n      const intervalId = setInterval(() => {\n        const currentTime = audioRef.current.currentTime;\n        const duration = audioRef.current.duration;\n        const progress = Math.round(currentTime / duration * 100);\n        updateProgressPercentage(progress);\n      }, 300);\n      updateProgressInterval(intervalId);\n    } else {\n      clearInterval(progressInterval);\n    }\n\n    return () => {\n      clearInterval(progressInterval);\n    };\n  }, [isPlaying]);\n\n  const startPlaying = () => {\n    audioRef.current.play();\n    updateIsPlaying(true);\n  };\n\n  const stopPlaying = () => {\n    audioRef.current.pause();\n    updateIsPlaying(false);\n  };\n\n  const updateTime = e => {\n    // const pg = progressRef.current.offsetX;\n    console.log(e.nativeEvent.offsetX);\n  };\n\n  return /*#__PURE__*/React.createElement(Element, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Progress, {\n    onClick: e => updateTime(e),\n    ref: progressRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    percentage: progressPercentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    src: currentEpisode.audio_preview_url,\n    ref: audioRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(SkipButton, {\n    direction: \"backward\",\n    scale: 1.25,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(MiddleButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  }, isPlaying ? /*#__PURE__*/React.createElement(PauseButton, {\n    scale: 1.25,\n    onClick: stopPlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(PlayButton, {\n    scale: 1.25,\n    onClick: startPlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(SkipButton, {\n    direction: \"forward\",\n    scale: 1.25,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Episode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InternalLink, {\n    to: `/episodes/${currentEpisode.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Thumbnail, {\n    src: currentEpisode.images[0].url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Name, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }, currentEpisode.name)))));\n};\n\nexport default Player;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/Player/Player.js"],"names":["React","useState","useContext","useRef","useEffect","styled","Link","PlayerContext","PlayButton","PauseButton","SkipButton","Element","div","theme","colors","tertiary","Progress","Bar","percentage","specific","Content","Controls","MiddleButton","Episode","typography","small","InternalLink","Thumbnail","img","Name","p","Player","props","isPlaying","updateIsPlaying","progressPercentage","updateProgressPercentage","progressInterval","updateProgressInterval","currentEpisode","audioRef","progressRef","intervalId","setInterval","currentTime","current","duration","progress","Math","round","clearInterval","startPlaying","play","stopPlaying","pause","updateTime","e","console","log","nativeEvent","offsetX","audio_preview_url","id","images","url","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { PlayerContext } from '../../../contexts/PlayerContextProvider';\nimport PlayButton from '../../../UI/PlayButton/PlayButton';\nimport PauseButton from '../../../UI/PauseButton/PauseButton';\nimport SkipButton from '../../../UI/SkipButton/SkipButton';\n\nconst Element = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    z-index: 700;\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.tertiary};\n    @media (min-width: 1024px) {\n        z-index: 1000;\n    }\n`;\n\nconst Progress = styled.div`\n    width: 100%;\n    height: 5px;\n    background-color: #414141;\n    @media (min-width: 1380px) {\n        position: absolute;\n        bottom: 1.5em;\n        left: 50%;\n        transform: translateX(-50%);\n        max-width: 700px;\n        border-radius: 2.5px;\n    }\n`;\n\nconst Bar = styled.div`\n    width: ${({ percentage }) => percentage ? percentage : 0}%; // Dynamic\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.specific};\n    transition: width 0.3s linear;\n\n    @media (min-width: 1380px) {\n        border-radius: 2.5px;\n    }\n`;\n\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1.5em 2em;\n\n    @media (min-width: 500px) {\n        flex-direction: row;\n        justify-content: flex-start;\n    }\n`;\n\nconst Controls = styled.div`\n    display: flex;\n    align-items: center;\n    @media (min-width: 500px) {\n        order: 2;\n        flex: 1;\n        justify-content: center;\n    }\n    @media (min-width: 1380px) {\n        position: absolute;\n        top: 1.25em;\n        left: 50%;\n        transform: translateX(-50%);\n    }\n`;\n\nconst MiddleButton = styled.div`\n    display: inline-block;\n    margin: 0 1em;\n`;\n\nconst Episode = styled.div`\n    font-size: ${({ theme }) => theme.typography.small};\n    color: ${({ theme }) => theme.colors.specific};\n    &:hover {\n        text-decoration: underline;\n    }\n    @media (min-width: 500px) {\n        order: 1;\n    }\n`;\n\nconst InternalLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    @media (min-width: 500px) {\n        max-width: 250px;\n        display: flex;\n        align-items: center;\n    }\n`;\n\nconst Thumbnail = styled.img`\n    display: none;\n    @media (min-width: 500px) {\n        display: block;\n        width: 50px;\n        height: 50px;\n        margin-right: 1em;\n        object-fit: cover;\n    }\n`;\n\nconst Name = styled.p`\n    max-height: 3em;\n    line-height: 1.5;\n    overflow: hidden;\n    overflow-wrap: anywhere;\n    text-overflow: ellipsis;\n`;\n\nconst Player = (props) => {\n    const [isPlaying, updateIsPlaying] = useState(false);\n    const [progressPercentage, updateProgressPercentage] = useState(0);\n    const [progressInterval, updateProgressInterval] = useState();\n    const { currentEpisode } = useContext(PlayerContext);\n    const audioRef = useRef();\n    const progressRef = useRef();\n\n    // Does it make sense to set and cancel intervals?\n    // Are multiple state updates better for the performance\n    // than a single interval running in the background any time?\n    useEffect(() => {\n        if(isPlaying) {\n            const intervalId = setInterval(() => {\n                const currentTime = audioRef.current.currentTime;\n                const duration = audioRef.current.duration;\n                const progress = Math.round(currentTime / duration * 100);\n                updateProgressPercentage(progress);\n            }, 300);\n            updateProgressInterval(intervalId);\n        } else {\n            clearInterval(progressInterval);\n        }\n        return () => {\n            clearInterval(progressInterval);\n        }\n    }, [isPlaying]);\n\n    const startPlaying = () => {\n        audioRef.current.play();\n        updateIsPlaying(true);\n    }\n\n    const stopPlaying = () => {\n        audioRef.current.pause();\n        updateIsPlaying(false);\n    }\n\n    const updateTime = (e) => {\n        // const pg = progressRef.current.offsetX;\n        console.log(e.nativeEvent.offsetX);\n    }\n\n    return (\n        <Element>\n            <Progress onClick={(e) => updateTime(e)} ref={progressRef}>\n                <Bar percentage={progressPercentage}/>\n            </Progress>\n            <Content>\n                <Controls>\n                    <audio src={currentEpisode.audio_preview_url} ref={audioRef}/>\n                    <SkipButton direction=\"backward\" scale={1.25}/>\n                    <MiddleButton>\n                        { isPlaying ?\n                            <PauseButton scale={1.25} onClick={stopPlaying} />\n                            :\n                            <PlayButton scale={1.25} onClick={startPlaying} />\n                        }\n                    </MiddleButton>\n                    <SkipButton direction=\"forward\" scale={1.25}/>\n                </Controls>\n                <Episode>\n                    <InternalLink to={`/episodes/${currentEpisode.id}`}>\n                        <Thumbnail src={currentEpisode.images[0].url}/>\n                        <Name>\n                            {currentEpisode.name}\n                        </Name>\n                    </InternalLink>\n                </Episode>\n            </Content>\n        </Element>\n    );\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}