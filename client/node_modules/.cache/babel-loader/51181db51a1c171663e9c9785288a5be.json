{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kamil.muzyka/Desktop/podcastify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kamil.muzyka/Desktop/podcastify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/kamil.muzyka/Desktop/podcastify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useEffect,Fragment}from'react';import{Redirect}from'react-router-dom';import{SearchContext}from'../../../contexts/SearchProvider';import Spotify from'../../../models/Spotify';import ShowsList from'../Shows/Shows';import Show from'../Shows/Show/Show';function SearchResults(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),shows=_useState2[0],updateShows=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),episodes=_useState4[0],updateEpisodes=_useState4[1];var _useContext=useContext(SearchContext),query=_useContext.query,updateQuery=_useContext.updateQuery;var _useContext2=useContext(SearchContext),searching=_useContext2.searching,updateSearching=_useContext2.updateSearching;function prepareShows(shows){if(shows.length===0){updateShows([]);return;}}function prepareEpisodes(episodes){if(episodes.length===0){updateEpisodes([]);return;}var newEpisodes=episodes.map(function(episode,index){return/*#__PURE__*/React.createElement(Show,{key:\"searchEpisode-\".concat(index),title:episode.name,description:episode.description,image:episode.images[1].url});});updateEpisodes(newEpisodes);}useEffect(function(){if(!searching){return;}var mounted=true;if(query){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var results;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Spotify.getSearchResults(query);case 2:results=_context.sent;if(mounted){prepareShows(results.shows.items);prepareEpisodes(results.episodes.items);}case 4:case\"end\":return _context.stop();}}},_callee);}))();}return function(){mounted=false;};},[query]);useEffect(function(){return function(){updateSearching(false);updateQuery('');};},[]);return searching?/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(ShowsList,null,episodes)):/*#__PURE__*/React.createElement(Redirect,{to:\"/\"});}export default SearchResults;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/components/Workspace/SearchResults/SearchResults.js"],"names":["React","useState","useContext","useEffect","Fragment","Redirect","SearchContext","Spotify","ShowsList","Show","SearchResults","props","shows","updateShows","episodes","updateEpisodes","query","updateQuery","searching","updateSearching","prepareShows","length","prepareEpisodes","newEpisodes","map","episode","index","name","description","images","url","mounted","getSearchResults","results","items"],"mappings":"odAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,SAAtC,CAAiDC,QAAjD,KAAiE,OAAjE,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,OAASC,aAAT,KAA8B,kCAA9B,CACA,MAAOC,CAAAA,OAAP,KAAoB,yBAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,gBAAtB,CACA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CAEA,QAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,eACGV,QAAQ,CAAC,EAAD,CADX,wCACnBW,KADmB,eACZC,WADY,8BAESZ,QAAQ,CAAC,EAAD,CAFjB,yCAEnBa,QAFmB,eAETC,cAFS,+BAGKb,UAAU,CAACI,aAAD,CAHf,CAGlBU,KAHkB,aAGlBA,KAHkB,CAGXC,WAHW,aAGXA,WAHW,kBAIaf,UAAU,CAACI,aAAD,CAJvB,CAIlBY,SAJkB,cAIlBA,SAJkB,CAIPC,eAJO,cAIPA,eAJO,CAM1B,QAASC,CAAAA,YAAT,CAAsBR,KAAtB,CAA6B,CACzB,GAAGA,KAAK,CAACS,MAAN,GAAiB,CAApB,CAAuB,CACnBR,WAAW,CAAC,EAAD,CAAX,CACA,OACH,CACJ,CAED,QAASS,CAAAA,eAAT,CAAyBR,QAAzB,CAAmC,CAC/B,GAAIA,QAAQ,CAACO,MAAT,GAAoB,CAAxB,CAA2B,CACvBN,cAAc,CAAC,EAAD,CAAd,CACA,OACH,CAED,GAAMQ,CAAAA,WAAW,CAAGT,QAAQ,CAACU,GAAT,CAAa,SAACC,OAAD,CAAUC,KAAV,CAAoB,CACjD,mBAAO,oBAAC,IAAD,EACH,GAAG,yBAAmBA,KAAnB,CADA,CAEH,KAAK,CAAED,OAAO,CAACE,IAFZ,CAGH,WAAW,CAAEF,OAAO,CAACG,WAHlB,CAIH,KAAK,CAAEH,OAAO,CAACI,MAAR,CAAe,CAAf,EAAkBC,GAJtB,EAAP,CAKH,CANmB,CAApB,CAQAf,cAAc,CAACQ,WAAD,CAAd,CACH,CAEDpB,SAAS,CAAC,UAAM,CACZ,GAAG,CAACe,SAAJ,CAAe,CACX,OACH,CACD,GAAIa,CAAAA,OAAO,CAAG,IAAd,CACA,GAAGf,KAAH,CAAU,CACN,wDAAC,qKACyBT,CAAAA,OAAO,CAACyB,gBAAR,CAAyBhB,KAAzB,CADzB,QACSiB,OADT,eAEG,GAAGF,OAAH,CAAY,CACRX,YAAY,CAACa,OAAO,CAACrB,KAAR,CAAcsB,KAAf,CAAZ,CACAZ,eAAe,CAACW,OAAO,CAACnB,QAAR,CAAiBoB,KAAlB,CAAf,CACH,CALJ,sDAAD,KAOH,CAED,MAAO,WAAM,CACTH,OAAO,CAAG,KAAV,CACH,CAFD,CAGH,CAlBQ,CAkBN,CAACf,KAAD,CAlBM,CAAT,CAoBAb,SAAS,CAAC,UAAM,CACZ,MAAO,WAAM,CACTgB,eAAe,CAAC,KAAD,CAAf,CACAF,WAAW,CAAC,EAAD,CAAX,CACH,CAHD,CAIH,CALQ,CAKN,EALM,CAAT,CAOA,MACKC,CAAAA,SAAD,cACI,oBAAC,QAAD,mBACI,oBAAC,SAAD,MACKJ,QADL,CADJ,CADJ,cAOI,oBAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EARR,CAUH,CAED,cAAeJ,CAAAA,aAAf","sourcesContent":["import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { SearchContext } from '../../../contexts/SearchProvider';\nimport Spotify from '../../../models/Spotify';\nimport ShowsList from '../Shows/Shows';\nimport Show from '../Shows/Show/Show';\n\nfunction SearchResults(props) {\n    const [shows, updateShows] = useState([]);\n    const [episodes, updateEpisodes] = useState([]);\n    const { query, updateQuery } = useContext(SearchContext);\n    const { searching, updateSearching } = useContext(SearchContext);\n\n    function prepareShows(shows) {\n        if(shows.length === 0) {\n            updateShows([]);\n            return;\n        }\n    }\n\n    function prepareEpisodes(episodes) {\n        if (episodes.length === 0) {\n            updateEpisodes([]);\n            return;\n        }\n\n        const newEpisodes = episodes.map((episode, index) => {\n            return <Show\n                key={`searchEpisode-${index}`}\n                title={episode.name}\n                description={episode.description}\n                image={episode.images[1].url} />\n        });\n\n        updateEpisodes(newEpisodes);\n    }\n\n    useEffect(() => {\n        if(!searching) {\n            return;\n        }\n        let mounted = true;\n        if(query) {\n            (async () => {\n                const results = await Spotify.getSearchResults(query);\n                if(mounted) {\n                    prepareShows(results.shows.items);\n                    prepareEpisodes(results.episodes.items);\n                }\n            })();\n        }\n\n        return () => {\n            mounted = false\n        };\n    }, [query]);\n\n    useEffect(() => {\n        return () => {\n            updateSearching(false);\n            updateQuery('');\n        }\n    }, [])\n\n    return (\n        (searching) ?\n            <Fragment>\n                <ShowsList>\n                    {episodes}\n                </ShowsList>\n            </Fragment>\n            :\n            <Redirect to=\"/\"/>\n    );\n}\n\nexport default SearchResults;"]},"metadata":{},"sourceType":"module"}