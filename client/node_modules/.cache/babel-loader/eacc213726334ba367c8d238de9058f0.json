{"ast":null,"code":"var _jsxFileName = \"/Users/kamil.muzyka/Desktop/podcastify/src/contexts/QueueContextProvider.js\";\nimport React, { createContext, useState } from 'react';\nexport const QueueContext = createContext();\n\nconst QueueContextProvider = props => {\n  const [queue, updateQueue] = useState([]);\n  const [queueHead, updateQueueHead] = useState(0);\n  const [currentEpisode, updateCurrentEpisode] = useState();\n\n  const loadQueue = (currentId, episodes) => {\n    let currentIndex = episodes.findIndex(episode => episode.id === currentEpisode.id);\n\n    if (currentIndex === -1) {\n      currentIndex = episodes.findIndex(episode => episode.id === currentId) || 0;\n    }\n\n    updateQueue(episodes);\n    updateQueueHead(currentIndex);\n    updateCurrentEpisode(episodes[currentIndex]);\n  };\n\n  const loadQueueNext = () => {\n    if (queueHead < queue.length - 1) {\n      updateCurrentEpisode(queue[queueHead + 1]);\n      updateQueueHead(prev => prev + 1);\n    } else {\n      updateCurrentEpisode(queue[0]);\n      updateQueueHead(0);\n    }\n  };\n\n  const loadQueuePrevious = () => {\n    if (queueHead > 0) {\n      updateCurrentEpisode(queue[queueHead - 1]);\n      updateQueueHead(prev => prev - 1);\n    } else {\n      updateCurrentEpisode(queue[queue.length - 1]);\n      updateQueueHead(queue.length - 1);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(QueueContext.Provider, {\n    value: {\n      currentEpisode,\n      queueHead,\n      loadQueue,\n      loadQueueNext,\n      loadQueuePrevious\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default QueueContextProvider;","map":{"version":3,"sources":["/Users/kamil.muzyka/Desktop/podcastify/src/contexts/QueueContextProvider.js"],"names":["React","createContext","useState","QueueContext","QueueContextProvider","props","queue","updateQueue","queueHead","updateQueueHead","currentEpisode","updateCurrentEpisode","loadQueue","currentId","episodes","currentIndex","findIndex","episode","id","loadQueueNext","length","prev","loadQueuePrevious","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,YAAY,GAAGF,aAAa,EAAlC;;AAEP,MAAMG,oBAAoB,GAAIC,KAAD,IAAW;AACpC,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBL,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACM,SAAD,EAAYC,eAAZ,IAA+BP,QAAQ,CAAC,CAAD,CAA7C;AACA,QAAM,CAACQ,cAAD,EAAiBC,oBAAjB,IAAyCT,QAAQ,EAAvD;;AAEA,QAAMU,SAAS,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AACzC,QAAIC,YAAY,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeR,cAAc,CAACQ,EAA5D,CAAnB;;AACA,QAAIH,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBA,MAAAA,YAAY,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeL,SAA7C,KAA2D,CAA1E;AACD;;AACDN,IAAAA,WAAW,CAACO,QAAD,CAAX;AACAL,IAAAA,eAAe,CAACM,YAAD,CAAf;AACAJ,IAAAA,oBAAoB,CAACG,QAAQ,CAACC,YAAD,CAAT,CAApB;AACD,GARD;;AAUA,QAAMI,aAAa,GAAG,MAAM;AAC1B,QAAIX,SAAS,GAAGF,KAAK,CAACc,MAAN,GAAe,CAA/B,EAAkC;AAChCT,MAAAA,oBAAoB,CAACL,KAAK,CAACE,SAAS,GAAG,CAAb,CAAN,CAApB;AACAC,MAAAA,eAAe,CAACY,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAf;AACD,KAHD,MAGO;AACLV,MAAAA,oBAAoB,CAACL,KAAK,CAAC,CAAD,CAAN,CAApB;AACAG,MAAAA,eAAe,CAAC,CAAD,CAAf;AACD;AACF,GARD;;AAUA,QAAMa,iBAAiB,GAAG,MAAM;AAC9B,QAAId,SAAS,GAAG,CAAhB,EAAmB;AACjBG,MAAAA,oBAAoB,CAACL,KAAK,CAACE,SAAS,GAAG,CAAb,CAAN,CAApB;AACAC,MAAAA,eAAe,CAACY,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAf;AACD,KAHD,MAGO;AACLV,MAAAA,oBAAoB,CAACL,KAAK,CAACA,KAAK,CAACc,MAAN,GAAe,CAAhB,CAAN,CAApB;AACAX,MAAAA,eAAe,CAACH,KAAK,CAACc,MAAN,GAAe,CAAhB,CAAf;AACD;AACF,GARD;;AAUA,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC1BV,MAAAA,cAD0B;AAE1BF,MAAAA,SAF0B;AAG1BI,MAAAA,SAH0B;AAI1BO,MAAAA,aAJ0B;AAK1BG,MAAAA;AAL0B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKjB,KAAK,CAACkB,QAPX,CADJ;AAWH,CA9CD;;AAgDA,eAAenB,oBAAf","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const QueueContext = createContext();\n\nconst QueueContextProvider = (props) => {\n    const [queue, updateQueue] = useState([]);\n    const [queueHead, updateQueueHead] = useState(0);\n    const [currentEpisode, updateCurrentEpisode] = useState();\n\n    const loadQueue = (currentId, episodes) => {\n      let currentIndex = episodes.findIndex(episode => episode.id === currentEpisode.id);\n      if (currentIndex === -1) {\n        currentIndex = episodes.findIndex(episode => episode.id === currentId) || 0;\n      }\n      updateQueue(episodes);\n      updateQueueHead(currentIndex);\n      updateCurrentEpisode(episodes[currentIndex]);\n    }\n\n    const loadQueueNext = () => {\n      if (queueHead < queue.length - 1) {\n        updateCurrentEpisode(queue[queueHead + 1]);\n        updateQueueHead(prev => prev + 1);\n      } else {\n        updateCurrentEpisode(queue[0]);\n        updateQueueHead(0);\n      }\n    }\n\n    const loadQueuePrevious = () => {\n      if (queueHead > 0) {\n        updateCurrentEpisode(queue[queueHead - 1]);\n        updateQueueHead(prev => prev - 1);\n      } else {\n        updateCurrentEpisode(queue[queue.length - 1]);\n        updateQueueHead(queue.length - 1);\n      }\n    }\n\n    return (\n        <QueueContext.Provider value={{\n            currentEpisode,\n            queueHead,\n            loadQueue,\n            loadQueueNext,\n            loadQueuePrevious\n        }}>\n            {props.children}\n        </QueueContext.Provider>\n    );\n}\n\nexport default QueueContextProvider;"]},"metadata":{},"sourceType":"module"}